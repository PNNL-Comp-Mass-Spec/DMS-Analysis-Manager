<?xml version="1.0"?>
<doc>
<assembly>
<name>
AnalysisManagerSequestPlugin
</name>
</assembly>
<members>
<member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String[]@)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<param name="strLineIgnoreRegExList">List of RegEx match specs that indicate lines to ignore</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.GetResources">
	<summary>
 Retrieves files necessary for performance of Sequest analysis
 </summary>
	<returns>IJobParams.CloseOutType indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.VerifyDatabase(System.String,System.String)">
	<summary>
 Verifies the fasta file required by the job is distributed to all the cluster nodes
 </summary>
	<param name="OrgDBName">Fasta file name</param>
	<param name="OrgDBPath">Fasta file location on analysis machine</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.GetHostList(System.String)">
	<summary>
 Reads the list of nodes from the hosts config file
 </summary>
	<param name="HostFileNameLoc">Name of hosts file on cluster head node</param>
	<returns>returns a string collection containing IP addresses for each node</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.VerifyRemoteDatabase(System.String,System.String,System.String,System.Boolean@)">
	<summary>
 Verifies specified database is present on the node. If present, compares date and size. If not
	present, copies database from master
 </summary>
	<param name="DbName">Fasta file name to be verified</param>
	<param name="SourcePath">Fasta storage location on cluster head</param>
	<param name="DestPath">Fasta storage location on cluster node</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks>Assumes DestPath is URL containing IP address of node and destination share name</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks>Does nothing at present</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,AnalysisManagerBase.IStatusFile)">
	<summary>
 Modifies base class Setup method to provide log message appropriate for this class
 </summary>
	<param name="mgrParams">Object containing manager parameters</param>
	<param name="jobParams">Object containing job parameters</param>
	<param name="StatusTools">Object providing tools for status file updates</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.MakeOUTFiles">
	<summary>
 Modifies MakeOUTFiles to remove multiple processes used on non-clustered machines
 </summary>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.m_CmdRunner_LoopWaiting">
	<summary>
 Provides a wait loop while Sequest is running
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.AddClusterStatsToSummaryFile">
	<summary>
 Reads sequest.log file after Sequest finishes and adds cluster statistics info to summary file
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.GetIntegerFromSeqLogFileString(System.String,System.String)">
	<summary>
 Finds specified integer value in a sequest.log file
 </summary>
	<param name="InpFileStr">A string containing the contents of the sequest.log file</param>
	<param name="RegexStr">Regular expresion match string to uniquely identify the line containing the count of interest</param>
	<returns>Count from desired line in sequest.log file if successful; 0 if count not found; -1 for error</returns>
	<remarks>If -1 returned, error message is in module variable m_ErrMsg</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.GetSingleFromSeqLogFileString(System.String,System.String)">
	<summary>
 Finds specified integer value in a sequest.log file
 </summary>
	<param name="InpFileStr">A string containing the contents of the sequest.log file</param>
	<param name="RegexStr">Regular expresion match string to uniquely identify the line containing the count of interest</param>
	<returns>Count from desired line in sequest.log file if successful; 0 if count not found; -1 for error</returns>
	<remarks>If -1 returned, error message is in module variable m_ErrMsg</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks>Presently not used</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,AnalysisManagerBase.IStatusFile)">
	<summary>
 Initializes class
 </summary>
	<param name="mgrParams">Object containing manager parameters</param>
	<param name="jobParams">Object containing job parameters</param>
	<param name="StatusTools">Object for updating status file as job progresses</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.RunTool">
	<summary>
 Runs the analysis tool
 </summary>
	<returns>IJobParams.CloseOutType value indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.CalculateNewStatus">
	<summary>
 Calculates status information for progress file
 </summary>
	<remarks>
 Calculation in this class is based on Sequest processing. For other processing types,
	override this function in derived class
</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.MakeOUTFiles">
	<summary>
 Runs Sequest to make .out files
 </summary>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ConcatOutFiles(System.String,System.String,System.String)">
	<summary>
 Concatenates the .out files in the working directory to a single _out.txt file
 </summary>
	<param name="WorkDir">Working directory</param>
	<param name="DSName">Dataset name</param>
	<param name="JobNum">Job number</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateDTAFiles">
	<summary>
 Make sure at least one .DTA file exists
 Also makes sure at least one of the .DTA files has data
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateSequestNodeCount(System.String)">
	<summary>
 Opens the sequest.log file in the working directory
 Parses out the number of nodes used and the number of slave processes spawned
 Counts the number of DTA files analyzed by each process
 </summary>
	<remarks></remarks>
	<returns>True if file found and information successfully parsed from it (regardless of the validity of the information); False if file not found or error parsing information</returns>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateSequestNodeCount(System.String,System.Boolean)">
	<summary>
 Opens the sequest.log file in the working directory
 Parses out the number of nodes used and the number of slave processes spawned
 Counts the number of DTA files analyzed by each process
 </summary>
	<param name="strLogFilePath">Path to the sequest.log file to parse</param>
	<param name="blnLogToConsole">If true, then displays the various status messages at the console</param>
	<remarks></remarks>
	<returns>True if file found and information successfully parsed from it (regardless of the validity of the information); False if file not found or error parsing information</returns>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ZipConcatOutFile(System.String,System.String,System.String)">
	<summary>
 Zips the concatenated .out file
 </summary>
	<param name="WorkDir">Working directory</param>
	<param name="ZipperLoc">Location of file zipping program</param>
	<param name="JobNum">Job number</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member>
</members>
</doc>