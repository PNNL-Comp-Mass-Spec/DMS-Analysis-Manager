<?xml version="1.0"?>
<doc>
<assembly>
<name>
AnalysisManagerProg
</name>
</assembly>
<members>
<member name="M:AnalysisManagerBase.AMFileNotFoundException.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="FileName">Name of file being processed when exception occurred</param>
	<param name="Message">Message to be returned in exception</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.AMFolderNotFoundException.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="FolderName">Name of unfound folder</param>
	<param name="Message">Message for exception to return</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.AMFileNotDeletedAfterRetryException.#ctor(System.String,AnalysisManagerBase.AMFileNotDeletedAfterRetryException.RetryExceptionType,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="FileName">Name of file causing exception</param>
	<param name="ExceptionType">Exception type</param>
	<param name="Message">Message to be returned by exception</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.AMFileNotDeletedException.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="FileName">Name of file causing exception</param>
	<param name="Message">Message to be returned by exception</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsEmergencyLog.WriteToLog(System.String,System.String,System.String)">
	<summary>
 Writes a message to a custom event log, which is used if standard log file not available
 </summary>
	<param name="SourceName">Name of source (program) using log</param>
	<param name="LogName">Name of log</param>
	<param name="ErrMsg">Message to write to log</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.Main">
	<summary>
 Starts program execution
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks>Doesn't do anything at present</remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.InitMgr">
	<summary>
 Initializes the manager settings
 </summary>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DoAnalysis">
	<summary>
 Loop to perform all analysis jobs
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DisableManagerLocally">
	<summary>
 Sets the local mgr_active flag to False for serious problems
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.m_FileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
	<summary>
 Event handler for file watcher
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.InitStatusTools">
	<summary>
 Initializes the status file writing tool
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.#ctor(System.String)">
	<summary>
 Constructor
 </summary>
	<param name="FileLocation">Full path to status file</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.ConvertStatusToString(AnalysisManagerBase.IStatusFile.JobStatus)">
	<summary>
 Converts the job status enum to a string value
 </summary>
	<param name="StatusEnum">An IStatusFile.JobStatus object</param>
	<returns>String representation of input object</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.WriteStatusFile">
	<summary>
 Writes the status file
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateAndWrite(System.Single)">
	<summary>
 Updates status file
 </summary>
	<param name="PercentComplete">Job completion percentage</param>
	<remarks>Overload to update when completion percentage is only change</remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateAndWrite(AnalysisManagerBase.IStatusFile.JobStatus,System.Single)">
	<summary>
 Updates status file
 </summary>
	<param name="Status">Job status enum</param>
	<param name="PercentComplete">Job completion percentage</param>
	<remarks>Overload to update file when status and completion percentage change</remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateAndWrite(AnalysisManagerBase.IStatusFile.JobStatus,System.Single,System.Int32)">
	<summary>
 Updates status file
 </summary>
	<param name="Status">Job status enum</param>
	<param name="PercentComplete">Job completion percentage</param>
	<param name="DTACount">Number of DTA files found for Sequest analysis</param>
	<remarks>Overload to provide Sequest DTA count</remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateIdle">
	<summary>
 Sets status file to show mahager idle
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateDisabled">
	<summary>
 Updates status file to show manager disabled
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.UpdateFlagFileExists">
	<summary>
 Updates status file to show manager stopped due to a flag file
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsStatusFile.GetRunTime">
	<summary>
 Total time the job has been running
 </summary>
	<returns>Number of hours manager has been processing job</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsGlobal.AppendToComment(System.String,System.String)">
	<summary>
 Appends a string to a job comment string
 </summary>
	<param name="InpComment">Comment currently in job params</param>
	<param name="NewComment">Comment to be appened</param>
	<returns>String containing both comments</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsGlobal.CleanWorkDir(System.String,PRISM.Logging.ILogger)">
	<summary>
 Deletes all files in working directory
 </summary>
	<param name="WorkDir">ull path to working directory</param>
	<param name="MyLogger">Logging object for error recording</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsGlobal.CreateStatusFlagFile">
	<summary>
 Creates a dummy file in the application directory to be used for controlling job request bypass
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsGlobal.DeleteStatusFlagFile(PRISM.Logging.ILogger)">
	<summary>
 Deletes the flag file
 </summary>
	<param name="MyLogger">Logging object for error recording</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsGlobal.DetectStatusFlagFile">
	<summary>
 Determines if flag file exists in application directory
 </summary>
	<returns>TRUE if flag file exists; FALSE otherwise</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsRunDosProgram.#ctor(PRISM.Logging.ILogger,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="Logger">Logging object</param>
	<param name="WorkDir">Workdirectory for input/output files, if any</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsSummaryFile.Clear">
	<summary>
 Clears summary file data
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsSummaryFile.SaveSummaryFile(System.String)">
	<summary>
 Writes the summary file to the specified location
 </summary>
	<param name="ResultFolderNamePath">Location where summary file is to be written</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsSummaryFile.Add(System.String)">
	<summary>
 Adds a line of data to summary file
 </summary>
	<param name="line">Data to be added</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks>Does nothing at present</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,PRISM.Logging.ILogger)">
	<summary>
 Initialize class
 </summary>
	<param name="mgrParams">Manager parameter object</param>
	<param name="jobParams">Job parameter object</param>
	<param name="logger">Logging object</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.GetResources">
	<summary>
 Gets all resources for an analysis job
 </summary>
	<returns>CloseOutType indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.CopyFileToWorkDir(System.String,System.String,System.String)">
	<summary>
 Copies specified file from storage server to local working directory
 </summary>
	<param name="InpFile">Name of file to copy</param>
	<param name="InpFolder">Path to folder where input file is located</param>
	<param name="OutDir">Destination directory for file copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.CopyFileToWorkDirWithRename(System.String,System.String,System.String)">
	<summary>
 Copies specified file from storage server to local working directory, renames destination with dataset name
 </summary>
	<param name="InpFile">Name of file to copy</param>
	<param name="InpFolder">Path to folder where input file is located</param>
	<param name="OutDir">Destination directory for file copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveOrgDB(System.String)">
	<summary>
 Determines if specified org db file already exists in OrgDBPath. If so, it compares with
 master version and copies master if different
 </summary>
	<param name="LocalOrgDBFolder">Path to local org db file storage</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks>Function only uses file file size/date to verify file validity</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveParamFile(System.String,System.String,System.String)">
	<summary>
 Copies analysis tool param file
 </summary>
	<param name="ParamFileName">Name of file to copy</param>
	<param name="ParamFilePath">Full path to param file</param>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveSettingsFile(System.String,System.String,System.String)">
	<summary>
 Copies analysis tool settings file
 </summary>
	<param name="SettingFileName">Name of file to copy</param>
	<param name="SettingFilePath">Full path to param file</param>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveSpectra(System.String,System.String)">
	<summary>
 Retrieves the spectra file(s) based on raw data type and puts them in the working directory
 </summary>
	<param name="RawDataType">Type of data to copy</param>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveDotRawFile(System.String)">
	<summary>
 Retrieves a .raw file for the analysis job in progress
 </summary>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveDotWiffFile(System.String)">
	<summary>
 Retrieves a .wiff file for the analysis job in progress
 </summary>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveMgfFile(System.String,System.Boolean)">
	<summary>
 Retrieves an Agilent ion trap .mgf file or .cdf/,mgf pair for analysis job in progress
 </summary>
	<param name="WorkDir">Destination dirctory for copy</param>
	<param name="GetCdfAlso">TRUE if .cdf file is needed along with .mgf file; FALSE otherwise</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveDotRawFolder(System.String)">
	<summary>
 Retrieves a .raw folder from Micromass TOF for the analysis job in progress
 </summary>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.RetrieveSFolders(System.String)">
	<summary>
 Unzips dataset folders to working directory
 </summary>
	<param name="WorkDir">Destination directory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.CopySFoldersToWorkDir(System.String)">
	<summary>
 Copies the zipped s-folders to the working directory
 </summary>
	<param name="WorkDir">Destination dirctory for copy</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.CopyFileWithRetry(System.String,System.String,System.Boolean)">
	<summary>
 Copies a file with retries in case of failure
 </summary>
	<param name="SrcFileName">Full path to source file</param>
	<param name="DestFileName">Full path to destination file</param>
	<param name="Overwrite">TRUE to overwrite existing destination file; FALSE otherwise</param>
	<returns>TRUE for success; FALSE for error</returns>
	<remarks>Logs copy errors</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResources.FileExistsWithRetry(System.String)">
	<summary>
 Test for file existence with a retry loop in case of temporary glitch
 </summary>
	<param name="FileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.#ctor(AnalysisManagerBase.IMgrParams,PRISM.Logging.ILogger,System.Int32)">
	<summary>
 Constructor
 </summary>
	<param name="mgrParams">IMgrParams object containing manager parameters</param>
	<param name="Logger">ILogger object for logging</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.GetParam(System.String)">
	<summary>
 Gets a task parameter from the task params class
 </summary>
	<param name="Name">Key name for parameter</param>
	<returns>Value for specified parameter</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.AddAdditionalParameter(System.String,System.String)">
	<summary>
 Adds a parameter to the class
 </summary>
	<param name="ParamName">Name of parameter</param>
	<param name="ParamValue">Value for parameter</param>
	<returns>TRUE for success, FALSE for error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.RequestTask">
	<summary>
 Requests a task from the database
 </summary>
	<returns>Enum indicating if task was found</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.RequestAnalysisJob">
	<summary>
 Requests a single analysis job
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.AddTaskParamsToDictionary(System.Int32)">
	<summary>
 Loads task parameters into the parameter dictionary
 </summary>
	<param name="TaskID">Task ID to obtain parameters for</param>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.CloseTask(System.Boolean)">
	<summary>
 Dummy sub to meet MustOverride requirement of base class
 </summary>
	<param name="Success"></param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.CloseTask(AnalysisManagerBase.IJobParams.CloseOutType,System.String,System.String)">
	<summary>
 Closes an analysis job
 </summary>
	<param name="CloseOut">IJobParams enum specifying close out type</param>
	<param name="resultsFolderName">Name of results folder for job</param>
	<param name="Comment">Comment to be added to database upon closeout</param>
	<remarks>Overloads the CloseTask sub inherited from base class</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisJob.SetAnalysisJobComplete(System.String,System.Int32,System.String,System.String,System.String)">
	<summary>
 Communicates with database to perform job closeout
 </summary>
	<param name="SpName">Name of SP in database to call for closeout</param>
	<param name="CompletionCode">Integer version of ITaskParams specifying closeout type</param>
	<param name="resultsFolderName">Name of results folder for job</param>
	<param name="Comment">Comment to insert in database</param>
	<param name="ConnStr">Database connection string</param>
	<returns>True for success, False for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.#ctor(System.String,System.String)">
	<summary>
 Constructor
 </summary>
	<param name="EmergencyLogSource">Source name registered for emergency logging</param>
	<param name="EmergencyLogName">Name of system log for emergency logging</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.LoadSettings(PRISM.Logging.ILogger)">
	<summary>
 Loads manager settings from config file and database
 </summary>
	<param name="MyLogger">Logging object if logger has been loaded; otherwise NOTHING</param>
	<returns>True if successful; False on error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.LoadMgrSettingsFromFile">
	<summary>
 Loads the initial settings from application config file
 </summary>
	<returns>String dictionary containing initial settings if suceessful; NOTHING on error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.CheckInitialSettings(System.Collections.Specialized.StringDictionary@)">
	<summary>
 Tests initial settings retrieved from config file
 </summary>
	<param name="InpDict"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.LoadMgrSettingsFromDB(PRISM.Logging.ILogger)">
	<summary>
 Gets remaining manager config settings from config database; 
 Overload to use module-level string dictionary when calling from external method
 </summary>
	<param name="MyLogger">Logging object or NOTHING</param>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.LoadMgrSettingsFromDB(System.Collections.Specialized.StringDictionary@,PRISM.Logging.ILogger)">
	<summary>
 Gets remaining manager config settings from config database
 </summary>
	<param name="MgrSettingsDict">String dictionary containing parameters that have been loaded so far</param>
	<param name="MyLogger">Logging object or NOTHING</param>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.GetParam(System.String)">
	<summary>
 Gets a parameter from the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<returns>String value associated with specified key</returns>
	<remarks>Returns Nothing if key isn't found</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.SetParam(System.String,System.String)">
	<summary>
 Sets a parameter in the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for the item</param>
	<param name="ItemValue">Value to assign to the key</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.WriteErrorMsg(System.String,PRISM.Logging.ILogger)">
	<summary>
 Writes an error message to application log or manager local log
 </summary>
	<param name="ErrMsg">Message to write</param>
	<param name="Logger">Logging object of logger has been created; otherwise NOTHING</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.DbCStr(System.Object)">
	<summary>
 Converts a database output object that could be dbNull to a string
 </summary>
	<param name="InpObj"></param>
	<returns>String equivalent of object; empty string if object is dbNull</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.GetAllKeys">
	<summary>
 Gets a collection representing all keys in the parameters string dictionary
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.WriteConfigSetting(System.String,System.String)">
	<summary>
 Writes specfied value to an application config file.
 </summary>
	<param name="Key">Name for parameter (case sensitive)</param>
	<param name="Value">New value for parameter</param>
	<returns>TRUE for success; FALSE for error (ErrMsg property contains reason)</returns>
	<remarks>This bit of lunacy is needed because MS doesn't supply a means to write to an app config file</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.LoadConfigDocument">
	<summary>
 Loads an app config file for changing parameters
 </summary>
	<returns>App config file as an XML document if successful; NOTHING on failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisMgrSettings.GetConfigFilePath">
	<summary>
 Specifies the full name and path for the application config file
 </summary>
	<returns>String containing full name and path</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.ClearMessageList">
	<summary>
 Clears internal list of error messages
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetPluginInfo(System.String,System.String@,System.String@)">
	<summary>
 Retrieves data for specified plugin from plugin info config file
 </summary>
	<param name="XPath">XPath spec for specified plugin</param>
	<param name="className">Name of class for plugin (return value) </param>
	<param name="assyName">Name of assembly for plugin (return value)</param>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.LoadObject(System.String,System.String)">
	<summary>
 Loads the specifed dll
 </summary>
	<param name="className">Name of class to load (from GetPluginInfo)</param>
	<param name="assyName">Name of assembly to load (from GetPluginInfo)</param>
	<returns>An object referencing the specified dll</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetToolRunner(System.String,System.Boolean)">
	<summary>
 Loads a tool runner object
 </summary>
	<param name="ToolName">Name of tool</param>
	<param name="clustered">TRUE if tool is running on a sequest cluster, FALSE otherwise</param>
	<returns>An object meeting the IToolRunner interface</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetSpectraGenerator(System.String)">
	<summary>
 Loads a tool spectra file generator object
 </summary>
	<param name="SpectraDataType">A spectra data type</param>
	<returns>Object meeting the ISpectraFileProcessor interface</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetSpectraFilter(System.String)">
	<summary>
 Loads a spectra filter object
 </summary>
	<param name="FilterType">Name of filter type to load</param>
	<returns>An object meeting the ISpectraFilter interface</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetAnalysisResources(System.String)">
	<summary>
 Loads a resourcer object
 </summary>
	<param name="ToolName">Name of analysis tool</param>
	<returns>An object meeting the IAnalysisResources interface</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsPluginLoader.GetPluginInfoFilePath(System.String)">
	<summary>
 Gets the path to the plugin info config file
 </summary>
	<param name="PluginInfoFileName">Name of plugin info file</param>
	<returns>Path to plugin info file</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResults.#ctor(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,PRISM.Logging.ILogger)">
	<summary>
 Constructor
 </summary>
	<param name="mgrParams">Manager parameter object</param>
	<param name="jobParams">Job parameter object</param>
	<param name="logger">Logging object</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisResults.DeliverResults(System.String)">
	<summary>
 Copies the results folder to the transfer directory
 </summary>
	<param name="ResultsFolderName">Name of results folder</param>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.RunTool">
	<summary>
 Runs the analysis tool
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks>This method is used to meet the interface requirement</remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.CreateAndFilterMSMSSpectra">
	<summary>
 Creates DTA files and filters if necessary
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.DispositionResults">
	<summary>
 Detailed method for running a tool
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.FilterSpectraFiles">
	<summary>
 Filters DTA files, if necessary
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.MakeSpectraFiles">
	<summary>
 Creates DTA files
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.ConcatSpectraFiles">
	<summary>
 Concatenates DTA files into a single test file
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.DeleteTempAnalFiles">
	<summary>
 Deletes unused files after analysis completes
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.DeleteDataFile">
	<summary>
 Deletes .raw files from working directory
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks>Overridden for other types of input files</remarks>
</member><member name="M:AnalysisManagerMSMSBase.clsAnalysisToolRunnerMSMS.ZipConcDtaFile">
	<summary>
 Zips concatenated DTA file to reduce size
 </summary>
	<returns>CloseoutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="P:AnalysisManagerBase.clsDBTask.TaskWasAssigned">
	<summary>
 Value showing if a transfer task was assigned
 </summary>
	<value></value>
	<returns>TRUE if task was assigned; otherwise false</returns>
	<remarks></remarks>
</member><member name="P:AnalysisManagerBase.clsDBTask.DebugLevel">
	<summary>
 Debug level
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Values from 0 (minimum output) to 5 (max detail)</remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.#ctor(AnalysisManagerBase.IMgrParams,PRISM.Logging.ILogger,System.Int32)">
	<summary>
 Constructor
 </summary>
	<param name="MgrParams">An IMgrParams object containing manager parameters</param>
	<param name="Logger">An ILogger object to handle logging</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.RequestTask">
	<summary>
 Requests a task
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.CloseTask(System.Boolean)">
	<summary>
 Closes a task
 </summary>
	<param name="Success"></param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.LogErrorEvents">
	<summary>
 Reports database errors to local log
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
	<summary>
 Event handler for InfoMessage event
 </summary>
	<param name="sender"></param>
	<param name="args"></param>
	<remarks>Errors and warnings from SQL Server are caught here</remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.GetTaskParams(System.String,System.Int32,System.String)">
	<summary>
 Requests task parameters from database
 </summary>
	<param name="SpName">Stored procedure to use for task request</param>
	<param name="EntityKey">Job number or datasetID, depending on task type</param>
	<param name="ConnStr">Connection string for database to be used</param>
	<returns>String dictionary containing task parameters if successful. NOTHING on failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.ExecuteSP(System.Data.SqlClient.SqlCommand@,System.String)">
	<summary>
 Method for executing a db stored procedure, assuming no data table is returned
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="ConnStr">Db connection string</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.ExecuteSP(System.Data.SqlClient.SqlCommand@,System.Data.DataTable@,System.String)">
	<summary>
 Method for executing a db stored procedure if a data table is to be returned
 </summary>
	<param name="SpCmd">SQL command object containing stored procedure params</param>
	<param name="OutTable">NOTHING when called; if SP successful, contains data table on return</param>
	<param name="ConnStr">Db connection string</param>
	<returns>Result code returned by SP; -1 if unable to execute SP</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsDBTask.PrintCommandParams(System.Data.SqlClient.SqlCommand)">
	<summary>
 Debugging routine for printing SP calling params
 </summary>
	<param name="InpCmd">SQL command object containing params</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks>Does nothing at present</remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,PRISM.Logging.ILogger,AnalysisManagerBase.IStatusFile)">
	<summary>
 Initializes class
 </summary>
	<param name="mgrParams">Object holding manager parameters</param>
	<param name="jobParams">Object holding job parameters</param>
	<param name="logger">Logging object</param>
	<param name="StatusTools">Object for status reporting</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.LoadSettingsFile">
	<summary>
 Loads the job settings file
 </summary>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.RunTool">
	<summary>
 Runs the analysis tool
 </summary>
	<returns>CloseoutType enum representing completion status</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.MakeResultsFolder(System.String)">
	<summary>
 Creates a results folder after analysis complete
 </summary>
	<param name="AnalysisType">An analysis tool name</param>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.UpdateSummaryFile">
	<summary>
 Updates the analysis summary file
 </summary>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.CalcElapsedTime(System.DateTime,System.DateTime)">
	<summary>
 Calculates total run time for a job
 </summary>
	<param name="StartTime">Time job started</param>
	<param name="StopTime">Time of job completion</param>
	<returns>Total job run time (HH:MM)</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.CleanupFailedJob(System.String)">
	<summary>
 Sets return message from analysis error and cleans working directory
 </summary>
	<param name="OopsMessage">Message to include in job comment field</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.OutputSummary(System.String)">
	<summary>
 Adds manager assembly data to job summary file
 </summary>
	<param name="OutputPath">Path to summary file</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerBase.clsAnalysisToolRunnerBase.DeleteFileWithRetries(System.String)">
	<summary>
 Makes multiple tries to delete specified file
 </summary>
	<param name="FileNamePath">Full path to file for deletion</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks>Raises exception if error occurs</remarks>
</member><member name="M:AnalysisManagerMSMSResourceBase.clsAnalysisResourcesMSMS.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,PRISM.Logging.ILogger)">
	<summary>
 Initializes class
 </summary>
	<param name="mgrParams">Object holding manager parameters</param>
	<param name="jobParams">Object holding analysis job parameters</param>
	<param name="logger">Logging object</param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSResourceBase.clsAnalysisResourcesMSMS.RetrieveOrgDB(System.String)">
	<summary>
 Overrides base class orgdb copy to use Ken's dll for creating a fasta file
 </summary>
	<param name="LocalOrgDBFolder">Folder on analysis machine where fasta files are stored</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSResourceBase.clsAnalysisResourcesMSMS.CreateFastaFile(System.String)">
	<summary>
 Creates a Fasta file based on Ken's DLL
 </summary>
	<param name="DestFolder">Folder where file will be created</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerMSMSResourceBase.clsAnalysisResourcesMSMS.VerifyFastaVersion(System.String,System.String)">
	<summary>
 Uses hashing features in Ken's dll to determine if the tested Fasta file is up to date
 </summary>
	<param name="TestFastaNamePath">Fasta file to be tested</param>
	<param name="RefFastaNamePath">Reference fasta file</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member>
</members>
</doc>