<?xml version="1.0"?>
<doc>
<assembly>
<name>
AnalysisManagerProg
</name>
</assembly>
<members>
<member name="M:clsAnalysisMgrSettings.AckManagerUpdateRequired">
	<summary>
 Calls stored procedure AckManagerUpdateRequired in the Manager Control DB
 </summary>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
	<summary>
 Constructor
 </summary>
	<param name="EmergencyLogSource">Source name registered for emergency logging</param>
	<param name="EmergencyLogName">Name of system log for emergency logging</param>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.LoadSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
	<summary>
 Loads manager settings from config file and database
 </summary>
	<param name="ConfigFileSettings">Manager settings loaded from file AnalysisManagerProg.exe.config</param>
	<returns>True if successful; False on error</returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.CheckInitialSettings(System.Collections.Generic.Dictionary{System.String,System.String}@)">
	<summary>
 Tests initial settings retrieved from config file
 </summary>
	<param name="InpDict"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.LoadMgrSettingsFromDB">
	<summary>
 Gets manager config settings from manager control DB
 </summary>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.LoadBrokerDBSettings">
	<summary>
 Gets global settings from Broker DB (aka Pipeline DB)
 </summary>
	<returns>True for success; False for error</returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.GetParam(System.String)">
	<summary>
 Gets a parameter from the manager parameters dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<returns>String value associated with specified key</returns>
	<remarks>Returns empty string if key isn't found</remarks>
</member><member name="M:clsAnalysisMgrSettings.GetParam(System.String,System.Boolean)">
	<summary>
 Gets a parameter from the manager parameters dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<param name="ValueIfMissing">Value to return if the parameter is not found</param>
	<returns>Value for specified parameter; ValueIfMissing if not found</returns>
</member><member name="M:clsAnalysisMgrSettings.GetParam(System.String,System.String)">
	<summary>
 Gets a parameter from the manager parameters dictionary
 </summary>
	<param name="ItemKey">Key name for item</param>
	<param name="ValueIfMissing">Value to return if the parameter is not found</param>
	<returns>Value for specified parameter; ValueIfMissing if not found</returns>
</member><member name="M:clsAnalysisMgrSettings.SetParam(System.String,System.String)">
	<summary>
 Sets a parameter in the parameters string dictionary
 </summary>
	<param name="ItemKey">Key name for the item</param>
	<param name="ItemValue">Value to assign to the key</param>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.WriteErrorMsg(System.String)">
	<summary>
 Writes an error message to application log or manager local log
 </summary>
	<param name="ErrMsg">Message to write</param>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.DbCStr(System.Object)">
	<summary>
 Converts a database output object that could be dbNull to a string
 </summary>
	<param name="InpObj"></param>
	<returns>String equivalent of object; empty string if object is dbNull</returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.WriteConfigSetting(System.String,System.String)">
	<summary>
 Writes specfied value to an application config file.
 </summary>
	<param name="Key">Name for parameter (case sensitive)</param>
	<param name="Value">New value for parameter</param>
	<returns>TRUE for success; FALSE for error (ErrMsg property contains reason)</returns>
	<remarks>This bit of lunacy is needed because MS doesn't supply a means to write to an app config file</remarks>
</member><member name="M:clsAnalysisMgrSettings.LoadConfigDocument">
	<summary>
 Loads an app config file for changing parameters
 </summary>
	<returns>App config file as an XML document if successful; NOTHING on failure</returns>
	<remarks></remarks>
</member><member name="M:clsAnalysisMgrSettings.GetConfigFilePath">
	<summary>
 Specifies the full name and path for the application config file
 </summary>
	<returns>String containing full name and path</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.ClearMessageList">
	<summary>
 Clears internal list of error messages
 </summary>
	<remarks></remarks>
</member><member name="F:clsPluginLoader.PLUGIN_DEBUG_MODE_ENABLED">
	<summary>
 Set the following to True if debugging
 </summary>
	<remarks>Also uncomment the appropriate case statements in the following two functions</remarks>
</member><member name="M:clsPluginLoader.GetPluginInfo(System.String,System.String@,System.String@)">
	<summary>
 Retrieves data for specified plugin from plugin info config file
 </summary>
	<param name="XPath">XPath spec for specified plugin</param>
	<param name="className">Name of class for plugin (return value) </param>
	<param name="assyName">Name of assembly for plugin (return value)</param>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.LoadObject(System.String,System.String)">
	<summary>
 Loads the specifed dll
 </summary>
	<param name="className">Name of class to load (from GetPluginInfo)</param>
	<param name="assyName">Name of assembly to load (from GetPluginInfo)</param>
	<returns>An object referencing the specified dll</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.GetToolRunner(System.String)">
	<summary>
 Loads a tool runner object
 </summary>
	<param name="ToolName">Name of tool</param>
	<returns>An object meeting the IToolRunner interface</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.GetSpectraGenerator(System.String)">
	<summary>
 Loads a tool spectra file generator object
 </summary>
	<param name="SpectraDataType">A spectra data type</param>
	<returns>Object meeting the ISpectraFileProcessor interface</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.GetAnalysisResources(System.String)">
	<summary>
 Loads a resourcer object
 </summary>
	<param name="ToolName">Name of analysis tool</param>
	<returns>An object meeting the IAnalysisResources interface</returns>
	<remarks></remarks>
</member><member name="M:clsPluginLoader.GetPluginInfoFilePath(System.String)">
	<summary>
 Gets the path to the plugin info config file
 </summary>
	<param name="PluginInfoFileName">Name of plugin info file</param>
	<returns>Path to plugin info file</returns>
	<remarks></remarks>
</member><member name="M:clsCodeTest.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:clsCodeTest.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String[]@)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<param name="strLineIgnoreRegExList">List of RegEx match specs that indicate lines to ignore</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:clsCodeTest.CheckETDModeEnabledXTandem(System.String,System.Boolean@)">
	<summary>
 Examines the X!Tndem param file to determine if ETD mode is enabled
 If it is, then sets m_ETDMode to True
 </summary>
	<param name="strParamFilePath">X!Tandem XML parameter file to read</param>
	<returns>True if success; false if an error</returns>
</member><member name="M:clsCodeTest.SplitFileRoundRobin(System.String,System.Int64,System.Boolean,System.String[]@)">
	<summary>
 Reads strSrcFilePath line-by-line and splits into multiple files such that none of the output 
 files has length greater than lngMaxSizeBytes. It will also check for a header line on the 
 first line; if a header line is found, then all of the split files will be assigned the same header line
 </summary>
	<param name="strSrcFilePath">FilePath to parse</param>
	<param name="lngMaxSizeBytes">Maximum size of each file</param>
	<param name="blnLookForHeaderLine">When true, then looks for a header line by checking if the first column contains a number</param>
	<param name="strSplitFileList">Output array listing the full paths to the split files that were created</param>
	<returns>True if success, False if failure</returns>
	<remarks></remarks>
</member><member name="M:clsCodeTest.FixICR2LSResultFileNames(System.String,System.String)">
	<summary>
 Look for the .PEK and .PAR files in the specified folder
 Make sure they are named Dataset_m_dd_yyyy.PAR andDataset_m_dd_yyyy.Pek
 </summary>
	<param name="strFolderPath">Folder to examine</param>
	<param name="strDatasetName">Dataset name</param>
	<remarks></remarks>
</member><member name="M:clsCodeTestAM.Setup(AnalysisManagerBase.IMgrParams,AnalysisManagerBase.IJobParams,AnalysisManagerBase.IStatusFile,AnalysisManagerBase.clsSummaryFile@)">
	<summary>
 Initializes class
 </summary>
	<param name="mgrParams">Object containing manager parameters</param>
	<param name="jobParams">Object containing job parameters</param>
	<param name="StatusTools">Object for updating status file as job progresses</param>
	<remarks></remarks>
</member><member name="M:clsCodeTestAM.RunTool">
	<summary>
 Runs the analysis tool
 </summary>
	<returns>IJobParams.CloseOutType value indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CleanWorkDir">
	<summary>
 Deletes all files in working directory (using a 10 second holdoff after calling GC.Collect)
 </summary>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CleanWorkDir(System.Single,System.String@)">
	<summary>
 Deletes all files in working directory
 </summary>
	<param name="HoldoffSeconds">Number of seconds to wait after calling GC.Collect() and GC.WaitForPendingFinalizers()</param>
	<param name="strFailureMessage">Error message (output)</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CleanWorkDir(System.String)">
	<summary>
 Deletes all files in working directory (using a 10 second holdoff after calling GC.Collect)
 </summary>
	<param name="WorkDir">Full path to working directory</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CleanWorkDir(System.String,System.Single,System.String@)">
	<summary>
 Deletes all files in working directory
 </summary>
	<param name="WorkDir">Full path to working directory</param>
	<param name="HoldoffSeconds">Number of seconds to wait after calling GC.Collect() and GC.WaitForPendingFinalizers()</param>
	<param name="strFailureMessage">Error message (output)</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CreateErrorDeletingFilesFlagFile">
	<summary>
 Creates a dummy file in the application directory when a error has occurred when trying to delete non result files
 </summary>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.CreateStatusFlagFile">
	<summary>
 Creates a dummy file in the application directory to be used for controlling job request bypass
 </summary>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DeleteDeconServerFlagFile(System.Int32)">
	<summary>
 Deletes the Decon2LS OA Server flag file
 </summary>
	<returns>True if no flag file exists or if file was successfully deleted</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DeleteFlagFile(System.String,System.Int32)">
	<summary>
 Deletes the file given by strFlagFilePath
 </summary>
	<param name="strFlagFilePath">Full path to the file to delete</param>
	<returns>True if no flag file exists or if file was successfully deleted</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DeleteStatusFlagFile(System.Int32)">
	<summary>
 Deletes the analysis manager flag file
 </summary>
	<returns>True if no flag file exists or if file was successfully deleted</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DetectErrorDeletingFilesFlagFile">
	<summary>
 Determines if error deleting files flag file exists in application directory
 </summary>
	<returns>TRUE if flag file exists; FALSE otherwise</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DetectStatusFlagFile">
	<summary>
 Determines if flag file exists in application directory
 </summary>
	<returns>TRUE if flag file exists; FALSE otherwise</returns>
	<remarks></remarks>
</member><member name="M:clsCleanupMgrErrors.DeleteErrorDeletingFilesFlagFile">
	<summary>
 Deletes the error deleting files flag file
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.Main">
	<summary>
 Starts program execution
 </summary>
	<returns>0 if no error; error code if an error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.#ctor">
	<summary>
 Constructor
 </summary>
</member><member name="M:AnalysisManagerProg.clsMainProcess.InitMgr">
	<summary>
 Initializes the manager settings
 </summary>
	<returns>TRUE for success, FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DoAnalysis">
	<summary>
 Loop to perform all analysis jobs
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.ConstructMostRecentJobInfoText(System.String,System.Int32,System.String,System.String)">
	<summary>
 Constructs a description of the given job using the job number, step tool name, and dataset name
 </summary>
	<param name="JobStartTimeStamp">Time job started</param>
	<param name="Job">Job name</param>
	<param name="Dataset">Dataset name</param>
	<param name="ToolName">Tool name (or step tool name)</param>
	<returns>Info string, similar to: Job 375797; DataExtractor (XTandem), Step 4; QC_Shew_09_01_b_pt5_25Mar09_Griffin_09-02-03; 3/26/2009 3:17:57 AM</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DecrementLogFilePath(System.String)">
	<summary>
 Given a log file with a name like AnalysisMgr_03-25-2009.txt, returns the log file name for the previous day
 </summary>
	<param name="strLogFilePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DetermineRecentErrorMessages(System.Int32,System.String@)">
	<summary>
 Parses the log files for this manager to determine the recent error messages, returning up to intErrorMessageCountToReturn of them
 Will use objLogger to determine the most recent log file
 Also examines the message info stored in objLogger
 Lastly, if strMostRecentJobInfo is empty, then will update it with info on the most recent job started
 </summary>
	<param name="intErrorMessageCountToReturn">Maximum number of error messages to return</param>
	<param name="strMostRecentJobInfo">Info on the most recent job started by this manager</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.DisableManagerLocally">
	<summary>
 Sets the local mgr_active flag to False for serious problems
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.GetDiskFreeSpace(System.String,System.Int64@,System.Int64@,System.Int64@)">
	<summary>
 Determines free disk space for the disk where the given directory resides.  Supports both fixed drive letters and UNC paths (e.g. \\Server\Share\)
 </summary>
	<param name="strDirectoryPath"></param>
	<param name="lngFreeBytesAvailableToUser"></param>
	<param name="lngTotalDriveCapacityBytes"></param>
	<param name="lngTotalNumberOfFreeBytes"></param>
	<returns>True if success, false if a problem</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.InitStatusTools">
	<summary>
 Initializes the status file writing tool
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.LoadMgrSettingsFromFile">
	<summary>
 Loads the initial settings from application config file
 </summary>
	<returns>String dictionary containing initial settings if suceessful; NOTHING on error</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.UpdateManagerSettings(System.DateTime@,System.Double)">
	<summary>
 Reloads the manager settings from the manager control database 
 if at least MinutesBetweenUpdates minutes have elapsed since the last update
 </summary>
	<param name="dtLastConfigDBUpdate"></param>
	<param name="MinutesBetweenUpdates"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.ValidateFreeDiskSpace(System.String@)">
	<summary>
 Confirms that the drive with the working directory has sufficient free space
 Confirms that the remote share for storing results is accessible and has sufficient free space
 </summary>
	<param name="ErrorMessage"></param>
	<returns></returns>
	<remarks>Disables the manager if the working directory drive does not have enough space</remarks>
</member><member name="M:AnalysisManagerProg.clsMainProcess.m_FileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
	<summary>
 Event handler for file watcher
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:clsParseCommandLine.InvalidParametersPresent(System.Collections.Generic.List{System.String})">
	<summary>
 Compares the parameter names in objParameterList with the parameters at the command line
 </summary>
	<param name="objParameterList">Parameter list</param>
	<returns>True if any of the parameters are not present in strParameterList()</returns>
</member><member name="M:clsParseCommandLine.InvalidParametersPresent(System.String[])">
	<summary>
 Compares the parameter names in strParameterList with the parameters at the command line
 </summary>
	<param name="strParameterList">Parameter list</param>
	<returns>True if any of the parameters are not present in strParameterList()</returns>
</member><member name="M:clsParseCommandLine.InvalidParametersPresent(System.String[],System.Boolean)">
	<summary>
 Compares the parameter names in strParameterList with the parameters at the command line
 </summary>
	<param name="strParameterList">Parameter list</param>
	<param name="blnCaseSensitive">True to perform case-sensitive matching of the parameter name</param>
	<returns>True if any of the parameters are not present in strParameterList()</returns>
</member><member name="M:clsParseCommandLine.IsParameterPresent(System.String)">
	<summary>
 Look for parameter on the command line
 </summary>
	<param name="strParameterName">Parameter name</param>
	<returns>True if present, otherwise false</returns>
</member><member name="M:clsParseCommandLine.ParseCommandLine">
	<summary>
 Parse the parameters and switches at the command line; uses / for the switch character and : for the switch parameter character
 </summary>
	<returns>Returns True if any command line parameters were found; otherwise false</returns>
	<remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member><member name="M:clsParseCommandLine.ParseCommandLine(System.Char)">
	<summary>
 Parse the parameters and switches at the command line; uses : for the switch parameter character
 </summary>
	<returns>Returns True if any command line parameters were found; otherwise false</returns>
	<remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member><member name="M:clsParseCommandLine.ParseCommandLine(System.Char,System.Char)">
	<summary>
 Parse the parameters and switches at the command line
 </summary>
	<param name="chSwitchStartChar"></param>
	<param name="chSwitchParameterChar"></param>
	<returns>Returns True if any command line parameters were found; otherwise false</returns>
	<remarks>If /? or /help is found, then returns False and sets mShowHelp to True</remarks>
</member><member name="M:clsParseCommandLine.RetrieveNonSwitchParameter(System.Int32)">
	<summary>
 Returns the value of the non-switch parameter at the given index
 </summary>
	<param name="intParameterIndex">Parameter index</param>
	<returns>The value of the parameter at the given index; empty string if no value or invalid index</returns>
</member><member name="M:clsParseCommandLine.RetrieveParameter(System.Int32,System.String@,System.String@)">
	<summary>
 Returns the parameter at the given index
 </summary>
	<param name="intParameterIndex">Parameter index</param>
	<param name="strKey">Parameter name (output)</param>
	<param name="strValue">Value associated with the parameter; empty string if no value (output)</param>
	<returns></returns>
</member><member name="M:clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@)">
	<summary>
 Look for parameter on the command line and returns its value in strValue
 </summary>
	<param name="strKey">Parameter name</param>
	<param name="strValue">Value associated with the parameter; empty string if no value (output)</param>
	<returns>True if present, otherwise false</returns>
</member><member name="M:clsParseCommandLine.RetrieveValueForParameter(System.String,System.String@,System.Boolean)">
	<summary>
 Look for parameter on the command line and returns its value in strValue
 </summary>
	<param name="strKey">Parameter name</param>
	<param name="strValue">Value associated with the parameter; empty string if no value (output)</param>
	<param name="blnCaseSensitive">True to perform case-sensitive matching of the parameter name</param>
	<returns>True if present, otherwise false</returns>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>