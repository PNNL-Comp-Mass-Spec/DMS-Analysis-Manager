<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PRISM</name>
    </assembly>
    <members>
        <member name="T:PRISM.clsDBTools">
            <summary>
            Tools to manipulates the database.
            </summary>
        </member>
        <member name="E:PRISM.clsDBTools.ErrorEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:PRISM.clsDBTools.ErrorEventEventHandler">
            <summary>
            error event delegate
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:PRISM.clsDBTools.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">Database connection string</param>
        </member>
        <member name="P:PRISM.clsDBTools.ConnectStr">
            <summary>
            The property sets and gets a connection string.
            </summary>
        </member>
        <member name="M:PRISM.clsDBTools.OpenConnection">
            <summary>
            The function opens a database connection.
            </summary>
            <return>True if the connection was successfully opened</return>
            <remarks>Retries the connection up to 3 times</remarks>
        </member>
        <member name="M:PRISM.clsDBTools.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            The subroutine is an event handler for InfoMessage event.
            </summary>
            <remarks>
            The errors and warnings sent from the SQL server are caught here
            </remarks>
        </member>
        <member name="M:PRISM.clsDBTools.GetDiscDataSet(System.String,System.Data.DataSet@,System.Int32@)">
            <summary>
            The function gets a disconnected dataset as specified by the SQL statement.
            </summary>
            <param name="SQL">A SQL string.</param>
            <param name="DS">A dataset.</param>
            <param name="rowCount">A row counter.</param>
            <return>Returns a disconnected dataset as specified by the SQL statement.</return>
        </member>
        <member name="M:PRISM.clsDBTools.GetQueryResults(System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.String}}@,System.String,System.Int16,System.Int32,System.Int32)">
            <summary>
            Run a query against a SQL Server database, return the results as a list of strings
            </summary>
            <param name="sqlQuery">Query to run</param>
            <param name="lstResults">Results (list of list of strings)</param>
            <param name="callingFunction">Name of the calling function (for logging purposes)</param>
            <param name="retryCount">Number of times to retry (in case of a problem)</param>
            <param name="timeoutSeconds">Query timeout (in seconds); minimum is 5 seconds; suggested value is 30 seconds</param>
            <param name="maxRowsToReturn">Maximum rows to return; 0 to return all rows</param>
            <returns>True if success, false if an error</returns>
            <remarks>
            Uses the connection string passed to the constructor of this class
            Null values are converted to empty strings
            Numbers are converted to their string equivalent
            By default, retries the query up to 3 times
            </remarks>
        </member>
        <member name="M:PRISM.clsDBTools.UpdateDatabase(System.String,System.Int32@)">
            <summary>
            The function updates a database table as specified in the SQL statement.
            </summary>
            <param name="SQL">A SQL string.</param>
            <param name="affectedRows">Affected Rows to be updated.</param>
            <return>Returns Boolean showing if the database was updated.</return>
        </member>
        <member name="T:PRISM.clsEventNotifier">
            <summary>
            This class implements various status events, including status, debug, error, and warning
            </summary>
        </member>
        <member name="E:PRISM.clsEventNotifier.DebugEvent">
            <summary>
            Debug event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.DebugEventEventHandler">
            <summary>
            Debug event
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.ErrorEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.ErrorEventEventHandler">
            <summary>
            Error event
            </summary>
            <param name="strMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.ProgressUpdate">
            <summary>
            Progress updated
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.ProgressUpdateEventHandler">
            <summary>
            Progress updated
            </summary>
            <param name="progressMessage"></param>
            <param name="percentComplete">Value between 0 and 100</param>
        </member>
        <member name="E:PRISM.clsEventNotifier.StatusEvent">
            <summary>
            Status event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.StatusEventEventHandler">
            <summary>
            Status event
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="E:PRISM.clsEventNotifier.WarningEvent">
            <summary>
            Warning event
            </summary>
        </member>
        <member name="T:PRISM.clsEventNotifier.WarningEventEventHandler">
            <summary>
            Warning event
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnDebugEvent(System.String)">
            <summary>
            Report a debug message
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnErrorEvent(System.String)">
            <summary>
            Report an error
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnErrorEvent(System.String,System.Exception)">
            <summary>
            Report an error
            </summary>
            <param name="strMessage"></param>
            <param name="ex">Exception (allowed to be nothing)</param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnProgressUpdate(System.String,System.Single)">
            <summary>
            Progress udpate
            </summary>
            <param name="progressMessage">Progress message</param>
            <param name="percentComplete">Value between 0 and 100</param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnStatusEvent(System.String)">
            <summary>
            Report a status message
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.OnWarningEvent(System.String)">
            <summary>
            Report a warning
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:PRISM.clsEventNotifier.RegisterEvents(PRISM.clsEventNotifier)">
            <summary>
            Use this method to chain events between classes
            </summary>
            <param name="oProcessingClass"></param>
        </member>
        <member name="T:PRISM.clsExecuteDatabaseSP">
            <summary>
            Tools to execute a stored procedure
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.RET_VAL_EXCESSIVE_RETRIES">
            <summary>
            Typically caused by timeout expired
            </summary>
        </member>
        <member name="F:PRISM.clsExecuteDatabaseSP.RET_VAL_DEADLOCK">
            <summary>
            Typically caused by transaction (Process ID 143) was deadlocked on lock resources with another process and has been chosen as the deadlock victim
            </summary>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Event handler for InfoMessage event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <remarks>Errors and warnings from SQL Server are caught here</remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Data.DataTable@)">
            <summary>
            Method for executing a db stored procedure if a data table is to be returned; will retry the call to the procedure up to DEFAULT_SP_RETRY_COUNT=3 times
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="outTable">If SP successful, contains data table on return</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            Method for executing a db stored procedure if a data table is to be returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="outTable">If SP successful, contains data table on return</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned; will retry the call to the procedure up to DEFAULT_SP_RETRY_COUNT=3 times
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.Int32)">
            <summary>
            Method for executing a db stored procedure, assuming no data table is returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.String@)">
            <summary>
            Method for executing a db stored procedure when a data table is not returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="errorMessage">Error message (output)</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks>No logging is performed by this procedure</remarks>
        </member>
        <member name="M:PRISM.clsExecuteDatabaseSP.ExecuteSP(System.Data.SqlClient.SqlCommand,System.Int32,System.String@,System.Int32)">
            <summary>
            Method for executing a db stored procedure when a data table is not returned
            </summary>
            <param name="spCmd">SQL command object containing stored procedure params</param>
            <param name="maxRetryCount">Maximum number of times to attempt to call the stored procedure</param>
            <param name="errorMessage">Error message (output)</param>
            <param name="retryDelaySeconds">Number of seconds to wait between retrying the call to the procedure</param>
            <returns>Result code returned by SP; -1 if unable to execute SP</returns>
            <remarks>No logging is performed by this procedure</remarks>
        </member>
        <member name="T:PRISM.clsProgRunner">
            <summary>
            This class runs a single program as an external process and monitors it with an internal thread
            </summary>
        </member>
        <member name="T:PRISM.clsProgRunner.States">
            <summary>
            clsProgRunner states
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_ExceptionLogger">
            <summary>
            Interface used for logging exceptions
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_EventLogger">
            <summary>
            Interface used for logging errors and health related messages
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_state">
            <summary>
            overall state of this object
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_Process">
            <summary>
            Used to start and monitor the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_pid">
            <summary>
            The process id of the currently running incarnation of the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_processIdInstanceName">
            <summary>
            The instance name of the most recent performance counter used by GetCoreUsageByProcessID
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_Thread">
            <summary>
            The internal thread used to run the monitoring code
            </summary>
            <remarks>
            That starts and monitors the external program
            </remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_doCleanup">
            <summary>
            Flag that tells internal thread to quit monitoring external program and exit
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_monitorInterval">
            <summary>
            The interval, in milliseconds, for monitoring the thread to wake up and check m_doCleanup
            </summary>
            <remarks>Default is 5000 msec</remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_ExitCode">
            <summary>
            Exit code returned by completed process
            </summary>
            <remarks>Initially set to -123454321</remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.m_CachedConsoleOutput">
            <summary>
            Caches the text written to the Console by the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.m_CachedConsoleError">
            <summary>
            Caches the text written to the Error buffer by the external program
            </summary>
        </member>
        <member name="F:PRISM.clsProgRunner.mCachedCoreCount">
            <summary>
            Number of cores on this computer
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PRISM.clsProgRunner.mCachedPerfCounters">
            <summary>
            Maps processId to a PerformanceCounter instance
            </summary>
            <remarks>The KeyValuePair tracks the performance counter instance name (could be empty string) and the PerformanceCounter instance</remarks>
        </member>
        <member name="E:PRISM.clsProgRunner.ProgChanged">
            <summary>
            This event is raised at regular intervals while monitoring the program
            </summary>
            <remarks>Raised every m_monitorInterval milliseconds</remarks>
        </member>
        <member name="T:PRISM.clsProgRunner.ConsoleOutputEventEventHandler">
            <summary>
            This event is raised when the external program writes text to the console
            </summary>
            <param name="NewText"></param>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.clsProgRunner.ConsoleErrorEventEventHandler">
            <summary>
            This event is raised when the external program writes text to the console's error stream
            </summary>
            <param name="NewText"></param>
            <remarks></remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.Arguments">
            <summary>
            Arguments supplied to external program when it is run
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CachedConsoleOutput">
            <summary>
            Text written to the Console by the external program (including carriage returns)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CachedConsoleError">
            <summary>
            Any text written to the Error buffer by the external program
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CacheStandardOutput">
            <summary>
            When true then will cache the text the external program writes to the console
            Can retrieve using the CachedConsoleOutput readonly property
            Will also fire event ConsoleOutputEvent as new text is written to the console
            </summary>
            <remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.ConsoleOutputFileIncludesCommandLine">
            <summary>
            When true, the program name and command line arguments will be added to the top of the console output file
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.ConsoleOutputFilePath">
            <summary>
            File path to which the console output will be written if WriteConsoleOutputToFile is true
            If blank, then file path will be auto-defined in the WorkDir  when program execution starts
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.CreateNoWindow">
            <summary>
            Determine if window should be displayed
            Will be forced to True if CacheStandardOutput = True
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.EchoOutputToConsole">
            <summary>
            When true, then echoes, in real time, text written to the Console by the external program 
            Ignored if CreateNoWindow = False
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.ExitCode">
            <summary>
            Exit code when process completes
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.MonitoringInterval">
            <summary>
            How often (milliseconds) internal monitoring thread checks status of external program
            </summary>
            <remarks>Minimum allowed value is 100 milliseconds</remarks>
        </member>
        <member name="P:PRISM.clsProgRunner.Name">
            <summary>
            Name of this progrunner
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.NotifyOnEvent">
            <summary>
            When true, raises event ProgChanged
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.NotifyOnException">
            <summary>
            When true, and if m_ExceptionLogger is defined, re-throws the exception
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.PID">
            <summary>
            Process id of currently running external program's process
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.Program">
            <summary>
            External program that prog runner will run
            This is the full path to the program file
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.Repeat">
            <summary>
            Whether prog runner will restart external program after it exits
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.RepeatHoldOffTime">
            <summary>
            Time (in seconds) that prog runner waits to restart the external program after it exits
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.State">
            <summary>
            Current state of prog runner (as number)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.StateName">
            <summary>
            Current state of prog runner (as descriptive name)
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WindowStyle">
            <summary>
            Window style to use when CreateNoWindow is False
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WorkDir">
            <summary>
            Working directory for process execution
            Not necessarily the same as the directory that contains the program we're running
            </summary>
        </member>
        <member name="P:PRISM.clsProgRunner.WriteConsoleOutputToFile">
            <summary>
            When true then will write the standard output to a file in real-time
            Will also fire event ConsoleOutputEvent as new text is written to the console
            Define the path to the file using property ConsoleOutputFilePath; if not defined, the file will be created in the WorkDir
            </summary>
            <remarks>If this is true, then no window will be shown, even if CreateNoWindow=False</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedConsoleOutput">
            <summary>
            Clears any console output text that is currently cached
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedPerformanceCounters">
            <summary>
            Clear any performance counters cached via a call to GetCoreUsage() or GetCoreUsageByProcessID()
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedPerformanceCounterForProcessID(System.Int32)">
            <summary>
            Clear the performance counter cached for the given Process ID
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ClearCachedConsoleError">
            <summary>
            Clears any console error text that is currently cached
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.ConsoleErrorHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Asynchronously handles the error stream from m_Process
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.ConsoleOutputHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Asynchronously handles the console output from m_Process
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.GarbageCollectNow">
            <summary>
            Force garbage collection
            </summary>
            <remarks>Waits up to 1 second for the collection to finish</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GarbageCollectNow(System.Int32)">
            <summary>
            Force garbage collection
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetConsoleOutputFilePath">
            <summary>
            Returns the full path to the console output file that will be created if WriteConsoleOutputToFile is true
            </summary>
            <returns></returns>
            <remarks>Before calling this function, define WorkDir (working directory folder) and Program (full path to the .exe to run)</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreCount">
            <summary>
            Returns the number of cores
            </summary>
            <returns>The number of cores on this computer</returns>
            <remarks>Should not be affected by hyperthreading, so a computer with two 4-core chips will report 8 cores</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsage">
            <summary>
            Reports the number of cores in use by the program started with StartAndMonitorProgram
            This method takes at least 1000 msec to execute
            </summary>
            <returns>Number of cores in use; -1 if an error</returns>
            <remarks>Core count is typically an integer, but can be a fractional number if not using a core 100%</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsageByProcessID(System.Int32)">
            <summary>
            Reports the number of cores in use by the given process
            This method takes at least 1000 msec to execute
            </summary>
            <param name="processId">Process ID for the program</param>
            <returns>Number of cores in use; 0 if the process is terminated.  Exception is thrown if a problem</returns>
            <remarks>Core count is typically an integer, but can be a fractional number if not using a core 100%</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsageByProcessID(System.Int32,System.String@)">
            <summary>
            Reports the number of cores in use by the given process
            This method takes at least 1000 msec to execute
            </summary>
            <param name="processId">Process ID for the program</param>
            <param name="processIdInstanceName">Expected instance name for the given processId; ignored if empty string. Updated to actual instance name if a new performance counter is created</param>
            <returns>Number of cores in use; 0 if the process is terminated. Exception is thrown if a problem</returns>
            <remarks>Core count is typically an integer, but can be a fractional number if not using a core 100%</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsageForPerfCounter(System.Diagnostics.PerformanceCounter,System.Int32)">
            <summary>
            Sample the given performance counter to determine the CPU usage
            </summary>
            <param name="perfCounter">Performance counter instance</param>
            <param name="maxAttempts">Number of attempts</param>
            <returns>Number of cores in use; 0 if the process is terminated. Exception is thrown if a problem</returns>
            <remarks>
            The first time perfCounter.NextSample() is called a Permissions exception is sometimes thrown
            Set maxAttempts to 2 or higher to gracefully handle this
            </remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsageByProcessName(System.String)">
            <summary>
            Reports the number of cores in use by the given process
            This method takes at least 1000 msec to execute
            </summary>
            <param name="processName">Process name, for example chrome (do not include .exe)</param>
            <returns>Number of cores in use; -1 if process not found; exception is thrown if a problem</returns>
            <remarks>
            Core count is typically an integer, but can be a fractional number if not using a core 100%
            If multiple processes are running with the given name then returns the total core usage for all of them
            </remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetCoreUsageByProcessName(System.String,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Reports the number of cores in use by the given process
            This method takes at least 1000 msec to execute
            </summary>
            <param name="processName">Process name, for example chrome (do not include .exe)</param>
            <param name="processIDs">List of ProcessIDs matching the given process name</param>
            <returns>Number of cores in use; -1 if process not found; exception is thrown if a problem</returns>
            <remarks>
            Core count is typically an integer, but can be a fractional number if not using a core 100%
            If multiple processes are running with the given name then returns the total core usage for all of them
            </remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetPerfCounterForProcessID(System.Int32,System.String@,System.String)">
            <summary>
            Obtain the performance counter for the given process
            </summary>
            <param name="processId">Process ID</param>
            <param name="instanceName">Output: instance name corresponding to processId</param>
            <param name="processCounterName">Performance counter to return</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.GetInstanceNameForProcessId(System.Int32)">
            <summary>
            Get the specific Windows instance name for a program
            </summary>
            <param name="processId">Process ID</param>
            <returns>Instance name if found, otherwise an empty string</returns>
            <remarks>If multiple programs named Chrome.exe are running, the first is Chrome.exe, the second is Chrome.exe#1, etc.</remarks>
        </member>
        <member name="M:PRISM.clsProgRunner.RegisterExceptionLogger(PRISM.ILogger)">
            <summary>
            Sets the name of the exception logger
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Sets the name of the event logger
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.StartProcess">
            <summary>
            Start program as external process and monitor its state
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.StartAndMonitorProgram">
            <summary>
            Creates a new thread and starts code that runs and monitors a program in it
            </summary>
        </member>
        <member name="M:PRISM.clsProgRunner.StopMonitoringProgram(System.Boolean)">
            <summary>
            Causes monitoring thread to exit on its next monitoring cycle
            </summary>
        </member>
        <member name="T:PRISM.clsStackTraceFormatter">
            <summary>
            This class produces an easier-to read stack trace for an exception
            See the descriptions for functions GetExceptionStackTrace and 
            GetExceptionStackTraceMultiLine for example text
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTrace(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a compact description of the current stack
            </summary>
            <param name="objException"></param>
            <returns>
            String of the form:
            "Stack trace: clsCodeTest.Test-:-clsCodeTest.TestException-:-clsCodeTest.InnerTestException in clsCodeTest.vb:line 86"
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceMultiLine(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack,
            with one line for each function in the call tree
            </summary>
            <param name="ex">Exception</param>
            <returns>
            Stack trace: 
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException 
               in clsCodeTest.vb:line 86
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceData(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack
            </summary>
            <param name="ex">Exception</param>
            <returns>
            List of function names; for example:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException 
               in clsCodeTest.vb:line 86
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsStackTraceFormatter.GetExceptionStackTraceData(System.String)">
            <summary>
            Parses the given StackTrace text to return a cleaned up description of the current stack
            </summary>
            <param name="stackTraceText">Exception.StackTrace data</param>
            <returns>
            List of function names; for example:
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException 
               in clsCodeTest.vb:line 86
            </returns>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.clsWindowsUpdateStatus">
            <summary>
            Utility functions for checking whether Windows updates are likely to be applied close to the current time
            Windows desktop computers have Windows updates applied around 3 am on the first Thursday after the second Tuesday of the month
            Windows servers have Windows updates applied around 3 am or 10 am on the first Sunday after the second Tuesday of the month
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending">
            <summary>
            Checks whether Windows Updates are expected to occur close to the current time of day
            </summary>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending(System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur close to the current time of day
            </summary>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.UpdatesArePending(System.DateTime,System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur close to currentTime
            </summary>
            <param name="currentTime">Current time of day</param>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on this computer or the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.ServerUpdatesArePending">
            <summary>
            Checks whether Windows Updates are expected to occur on Windows Server machines close to the current time of day
            </summary>
            <returns>True if Windows updates are likely pending on the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsWindowsUpdateStatus.ServerUpdatesArePending(System.DateTime,System.String@)">
            <summary>
            Checks whether Windows Updates are expected to occur on Windows Server machines close currentTime
            </summary>
            <param name="currentTime">Current time of day</param>
            <param name="pendingWindowsUpdateMessage">Output: description of the pending or recent Windows updates</param>
            <returns>True if Windows updates are likely pending on the Windows servers</returns>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.DirectoryScanner">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
        </member>
        <member name="E:PRISM.DirectoryScanner.FoundFile">
            <summary>
            A file was found when scanning the directory
            </summary>
        </member>
        <member name="T:PRISM.DirectoryScanner.FoundFileEventHandler">
            <summary>
            Event is raised whenever a matching file is found.
            </summary>
            <remarks>This event is most useful for implementing a progress indicator.</remarks>
            <param name="fileName">The found file's full path.</param>
        </member>
        <member name="M:PRISM.DirectoryScanner.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor: Initializes a new instance of the DirectoryScanner class.
            </summary>
            <param name="dirs">An array of directory paths to scan.</param>
        </member>
        <member name="M:PRISM.DirectoryScanner.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor: Initializes a new instance of the DirectoryScanner class.
            </summary>
            <param name="dirs">A list of directory paths to scan</param>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.DirectoryScanner.PerformScan(System.Collections.ArrayList@,System.String[])">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
            <param name="results">An array of file paths found; unchanged if no matches</param>
            <param name="searchPatterns">An array of regular expressions to use in the search.</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:PRISM.DirectoryScanner.PerformScan(System.String[])">
            <summary>
            Performs a recursive search of a directory tree looking for file names that match a set of regular expressions.
            </summary>
            <param name="searchPatterns">An array of regular expressions to use in the search.</param>
            <returns>A list of the file paths found; empty list if no matches</returns>
        </member>
        <member name="T:PRISM.clsFileTools">
             <summary>
             Tools to manipulate paths and directories.
             </summary>
             <remarks>
             There is a set of functions to properly terminate directory paths.
             There is a set of functions to copy an entire directory tree.
             There is a set of functions to copy an entire directory tree and resume copying interrupted files.
             There is a set of functions to get the size of an entire directory tree, including the number of files and directories.
            </remarks>
        </member>
        <member name="E:PRISM.clsFileTools.CopyingFile">
            <summary>
            File copy starting event
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.CopyingFileEventHandler">
            <summary>
            Event is raised before copying begins.
            </summary>
            <param name="filename">The file's full path.</param>
        </member>
        <member name="E:PRISM.clsFileTools.ResumingFileCopy">
            <summary>
            Event is raised before copying begins (when resuming a file copy)
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.ResumingFileCopyEventHandler">
            <summary>
            Event is raised before copying begins (when resuming a file copy)
            </summary>
            <param name="filename">The file's full path.</param>
        </member>
        <member name="E:PRISM.clsFileTools.FileCopyProgress">
            <summary>
            Event is raised before copying begins
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.FileCopyProgressEventHandler">
            <summary>
            Event is raised before copying begins
            </summary>
            <param name="filename">The file name (not full path)</param>
            <param name="percentComplete">Percent complete (value between 0 and 100)</param>
        </member>
        <member name="E:PRISM.clsFileTools.WaitingForLockQueue">
            <summary>
            Waiting for the lock queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.WaitingForLockQueueEventHandler">
            <summary>
            Waiting for the lock queue
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="backlogSourceMB">Source computer backlog, in MB</param>
            <param name="backlogTargetMB">Target computer backlog, in MB</param>
        </member>
        <member name="E:PRISM.clsFileTools.LockQueueTimedOut">
            <summary>
            Event is raised if we wait to long for our turn in the lock file queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.LockQueueTimedOutEventHandler">
            <summary>
            Event is raised if we wait to long for our turn in the lock file queue
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="waitTimeMinutes"></param>
        </member>
        <member name="E:PRISM.clsFileTools.LockQueueWaitComplete">
            <summary>
            Event is raised when we are done waiting waiting for our turn in the lock file queue
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.LockQueueWaitCompleteEventHandler">
            <summary>
            Event is raised when we are done waiting waiting for our turn in the lock file queue
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="waitTimeMinutes"></param>
        </member>
        <member name="F:PRISM.clsFileTools.LOCKFILE_MININUM_SOURCE_FILE_SIZE_MB">
            <summary>
            Minimum source file size (in MB) for the lock queue to be used
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.DATE_TIME_FORMAT">
            <summary>
            Standard date/time formatting
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.DEFAULT_CHUNK_SIZE_MB">
            <summary>
            Used by CopyFileWithResume and CopyDirectoryWithResume when copying a file byte-by-byte and supporting resuming the copy if interrupted
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PRISM.clsFileTools.DEFAULT_FLUSH_THRESHOLD_MB">
            <summary>
            Used by CopyFileWithResume; defines how often the data is flushed out to disk; must be larger than the ChunkSize
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PRISM.clsFileTools.FileOverwriteMode">
            <summary>
            File overwrite options
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.DoNotOverwrite">
            <summary>
            Do not overwrite
            </summary>
            <remarks>An exception will be thrown if you try to overwrite an existing file</remarks>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.AlwaysOverwrite">
            <summary>
            Always overwrite
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.OverwriteIfSourceNewer">
            <summary>
            OverWrite if source date newer (or if same date but length differs)
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.FileOverwriteMode.OverWriteIfDateOrLengthDiffer">
            <summary>
            OverWrite if any difference in size or date; note that newer files in target folder will get overwritten since their date doesn't match
            </summary>
        </member>
        <member name="T:PRISM.clsFileTools.CopyStatus">
            <summary>
            Copy status
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.Idle">
            <summary>
            Not copying a file
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.NormalCopy">
            <summary>
            File is geing copied via .NET and cannot be resumed
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.BufferedCopy">
            <summary>
            File is being copied in chunks and can be resumed
            </summary>
        </member>
        <member name="F:PRISM.clsFileTools.CopyStatus.BufferedCopyResume">
            <summary>
            Resuming copying a file in chunks
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.CopyChunkSizeMB">
            <summary>
            Copy chunk size, in MB
            </summary>
            <remarks>Used by CopyFileWithResume</remarks>
        </member>
        <member name="P:PRISM.clsFileTools.CopyFlushThresholdMB">
            <summary>
            Copy flush threshold, in MB
            Cached data is written to disk when this threshold is reached
            </summary>
            <remarks>Used by CopyFileWithResume</remarks>
        </member>
        <member name="P:PRISM.clsFileTools.CurrentCopyStatus">
            <summary>
            Current copy status
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.CurrentSourceFile">
            <summary>
            Current source file path
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.DebugLevel">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="P:PRISM.clsFileTools.ManagerName">
            <summary>
            Manager name (used when creating lock files)
            </summary>
        </member>
        <member name="M:PRISM.clsFileTools.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="managerName"></param>
            <param name="intDebugLevel"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.Boolean,System.Char)">
            <summary>
            Modifies input directory path string depending on optional settings.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path string ends with the specified directory separation character.</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.Boolean)">
            <summary>
            Adds or removes the DOS path separation character from the end of the directory path.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path string ends with the specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String,System.String)">
            <summary>
            Assures the directory path ends with the specified path separation character.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminator(System.String)">
            <summary>
            Assures the directory path ends with the DOS path separation character.
            </summary>
            <param name="folderPath">The input directory path.</param>
            <returns>The modified directory path.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.CheckTerminatorEX(System.String,System.Boolean,System.Char)">
            <summary>
            Modifies input directory path string depending on addTerm
            </summary>
            <param name="folderPath">The input directory path.</param>
            <param name="addTerm">Specifies whether the directory path should end with the specified directory separation character</param>
            <param name="termChar">The specified directory separation character.</param>
            <returns>The modified directory path.</returns>
            <remarks>addTerm=True forces the path to end with specified termChar while addTerm=False will remove termChar from the end if present</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String)">
            <summary>
            Copies a source file to the destination file. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source file to the destination file
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True to overwrite</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a source file to the destination file
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True to overwrite</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFile(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies a source file to the destination file. Allows overwriting.
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True if the destination file can be overwritten; otherwise, false.</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
            <param name="versionCountToKeep">Number of backup copies to keep</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileEx(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies a source file to the destination file. Allows overwriting.
            </summary>
            <remarks>
            This function is unique in that it allows you to specify a destination path where
            some of the directories do not already exist.  It will create them if they don't.
            The last parameter specifies whether a file already present in the
            destination directory will be overwritten
            - Note: requires Imports System.IO
            - Usage: CopyFile("C:\Misc\Bob.txt", "D:\MiscBackup\Bob.txt")
            </remarks>
            <param name="sourcePath">The source file path.</param>
            <param name="destPath">The destination file path.</param>
            <param name="overWrite">True if the destination file can be overwritten; otherwise, false.</param>
            <param name="backupDestFileBeforeCopy">True to backup the destination file before copying</param>
            <param name="versionCountToKeep">Number of backup copies to keep</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.String)">
            <summary>
            Copy the source file to the target path; do not overWrite existing files
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="sourceFilePath">Source file path</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="fiSource">Source file object</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFolder(System.IO.FileInfo)">
            <summary>
            Given a file path, return the lock file folder if it exsists
            </summary>
            <param name="fiFile"></param>
            <returns>Lock folder path if it exists</returns>
            <remarks>Lock folders are only returned for remote shares (shares that start with \\)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFolderPath(System.IO.FileInfo)">
            <summary>
            Given a file path, return the lock file folder path (does not verify that it exists)
            </summary>
            <param name="fiFile"></param>
            <returns>Lock folder path</returns>
            <remarks>Lock folders are only returned for remote shares (shares that start with \\)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileUsingLocks(System.String,System.String,System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Copy the source file to the target path
            </summary>
            <param name="lockFolderPathSource">Path to the lock folder for the source file; can be an empty string</param>
            <param name="lockFolderPathTarget">Path to the lock folder for the target file; can be an empty string</param>
            <param name="fiSource">Source file object</param>
            <param name="targetFilePath">Target file path</param>
            <param name="managerName">Manager name (included in the lock file name)</param>
            <param name="overWrite">True to overWrite existing files</param>
            <returns>True if success, false if an error</returns>
            <remarks>If the file exists yet overWrite is false, will not copy the file but will still return true</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CreateLockFile(System.IO.DirectoryInfo,System.Int64,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Create a lock file in the specified lock folder
            </summary>
            <param name="diLockFolder"></param>
            <param name="lockFileTimestamp"></param>
            <param name="fiSource"></param>
            <param name="targetFilePath"></param>
            <param name="managerName"></param>
            <returns>Full path to the lock file; empty string if an error or if diLockFolder is null</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectory(System.String)">
            <summary>
             Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectory(System.String,System.Boolean)">
            <summary>
             Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <param name="ignoreErrors"></param>
            <returns>True if success, false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectoryFiles(System.String)">
            <summary>
            Deletes the specified directory and all subdirectories; does not delete the target folder
            </summary>
            <param name="directoryPath"></param>
            <returns>True if success, false if an error</returns>
            <remarks>Deletes each file individually.  Deletion errors are reported but are not treated as a fatal error</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteDirectoryFiles(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and all subdirectories
            </summary>
            <param name="directoryPath"></param>
            <param name="deleteFolderIfEmpty">Set to True to delete the folder, if it is empty</param>
            <returns>True if success, false if an error</returns>
            <remarks>Deletes each file individually.  Deletion errors are reported but are not treated as a fatal error</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileIgnoreErrors(System.String)">
            <summary>
            Delete the specified file
            </summary>
            <param name="filePath"></param>
            <returns>True if successfully deleted (or if the file doesn't exist); false if an error</returns>
            <remarks>If the initial attempt fails, then checks the readonly bit and tries again.  If not readonly, then performs a garbage collection (every 500 msec)</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.FindLockFiles(System.IO.DirectoryInfo,System.Int64)">
            <summary>
            Finds lock files with a timestamp less than
            </summary>
            <param name="diLockFolder"></param>
            <param name="lockFileTimestamp"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GenerateLockFileName(System.Int64,System.IO.FileInfo,System.String)">
            <summary>
            Generate the lock file name, which starts with a msec-based timestamp, then has the source file size (in MB), then has information on the machine creating the file
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="fiSource"></param>
            <param name="managerName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetLockFileTimeStamp">
            <summary>
            Get the time stamp to be used when naming a lock file
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetServerShareBase(System.String)">
            <summary>
            Returns the first portion of a network share path, for example \\MyServer is returned for \\MyServer\Share\Filename.txt
            </summary>
            <param name="serverSharePath"></param>
            <returns></returns>
            <remarks>Treats \\picfs as a special share since DMS-related files are at \\picfs\projects\DMS</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Does not allow overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">
            List of file names to skip when copying the directory (and subdirectories); 
            can optionally contain full path names to skip</param>
            <param name="managerName"></param>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryEx(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Copies a source directory to the destination directory. Allows overwriting.
            </summary>
            <remarks>Usage: CopyDirectory("C:\Misc", "D:\MiscBackup")
            Original code obtained from vb2themax.com
            </remarks>
            <param name="sourcePath">The source directory path.</param>
            <param name="destPath">The destination directory path.</param>
            <param name="overWrite">true if the destination file can be overwritten; otherwise, false.</param>
            <param name="setAttribute">true if the read-only attribute of the destination file is to be modified, false otherwise.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">
            List of file names to skip when copying the directory (and subdirectories); 
            can optionally contain full path names to skip</param>
            <param name="managerName">Name of the calling program; used when calling CopyFileUsingLocks</param>
        </member>
        <member name="M:PRISM.clsFileTools.UpdateReadonlyAttribute(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Copies the file attributes from a source file to a target file, explicitly updating the read-only bit based on readOnly
            </summary>
            <param name="fiSourceFile">Source FileInfo</param>
            <param name="targetFilePath">Target file path</param>
            <param name="readOnly">True to force the ReadOnly bit on, False to force it off</param>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String)">
            <summary>
            Copies a source directory to the destination directory.
            Overwrites existing files if they differ in modification time or size.
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean)">
            <summary>
            Copies a source directory to the destination directory.
            Overwrites existing files if they differ in modification time or size.
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String})">
            <summary>
            Copies a source directory to the destination directory. 
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory. 
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory. 
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyDirectoryWithResume(System.String,System.String,System.Boolean,PRISM.clsFileTools.FileOverwriteMode,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Copies a source directory to the destination directory. 
            overWrite behavior is governed by fileOverwriteMode
            Copies large files in chunks and allows resuming copying a large file if interrupted.
            </summary>
            <param name="sourceFolderPath">The source directory path.</param>
            <param name="targetFolderPath">The destination directory path.</param>
            <param name="recurse">True to copy subdirectories</param>
            <param name="fileOverwriteMode">Behavior when a file already exists at the destination</param>
            <param name="setAttribute">True if the read-only attribute of the destination file is to be modified, false otherwise.</param>
            <param name="readOnly">The value to be assigned to the read-only attribute of the destination file.</param>
            <param name="fileNamesToSkip">List of file names to skip when copying the directory (and subdirectories); can optionally contain full path names to skip</param>
            <param name="fileCountSkipped">Number of files skipped (output)</param>
            <param name="fileCountResumed">Number of files resumed (output)</param>
            <param name="fileCountNewlyCopied">Number of files newly copied (output)</param>
            <returns>True if success; false if an error</returns>
            <remarks>Usage: CopyDirectoryWithResume("C:\Misc", "D:\MiscBackup")</remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileWithResume(System.String,System.String,System.Boolean@)">
            <summary>
            Copy a file using chunks, thus allowing for resuming
            </summary>
            <param name="sourceFilePath"></param>
            <param name="targetFilePath"></param>
            <param name="copyResumed"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CopyFileWithResume(System.IO.FileInfo,System.String,System.Boolean@)">
            <summary>
            Copy fiSourceFile to diTargetFolder
            Copies the file using chunks, thus allowing for resuming
            </summary>
            <param name="fiSourceFile"></param>
            <param name="targetFilePath"></param>
            <param name="copyResumed">Output parameter; true if copying was resumed</param>
            <returns>True if success; false if an error</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.NearlyEqualFileTimes(System.DateTime,System.DateTime)">
            <summary>
            Compares two timestamps (typically the LastWriteTime for a file)
            If they agree within 2 seconds, then returns True, otherwise false
            </summary>
            <param name="dtTime1">First file time</param>
            <param name="dtTime2">Second file time</param>
            <returns>True if the times agree within 2 seconds</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySize(System.String)">
            <summary>
            Get the directory size.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySize(System.String,System.Int64@,System.Int64@)">
            <summary>
            Get the directory size, file count, and directory count for the entire directory tree.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <param name="fileCount">The number of files in the entire directory tree.</param>
            <param name="subFolderCount">The number of directories in the entire directory tree.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.GetDirectorySizeEX(System.String,System.Int64@,System.Int64@)">
            <summary>
            Get the directory size, file count, and directory count for the entire directory tree.
            </summary>
            <param name="folderPath">The path to the directory.</param>
            <param name="fileCount">The number of files in the entire directory tree.</param>
            <param name="subFolderCount">The number of directories in the entire directory tree.</param>
            <returns>The directory size.</returns>
        </member>
        <member name="M:PRISM.clsFileTools.MoveDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Move a directory
            </summary>
            <param name="sourceFolderPath"></param>
            <param name="targetFolderPath"></param>
            <param name="overwriteFiles"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.MoveDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Move a directory
            </summary>
            <param name="sourceFolderPath"></param>
            <param name="targetFolderPath"></param>
            <param name="overwriteFiles"></param>
            <param name="managerName"></param>
            <returns></returns>
        </member>
        <member name="M:PRISM.clsFileTools.BackupFileBeforeCopy(System.String)">
            <summary>
            Renames targetFilePath to have _Old1 before the file extension
            Also looks for and renames other backed up versions of the file (those with _Old2, _Old3, etc.)
            Use this function to backup old versions of a file before copying a new version to a target folder
            Keeps up to 9 old versions of a file
            </summary>
            <param name="targetFilePath">Full path to the file to backup</param>
            <returns>True if the file was successfully renamed (also returns True if the target file does not exist)</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.BackupFileBeforeCopy(System.String,System.Int32)">
            <summary>
            Renames targetFilePath to have _Old1 before the file extension
            Also looks for and renames other backed up versions of the file (those with _Old2, _Old3, etc.)
            Use this function to backup old versions of a file before copying a new version to a target folder
            </summary>
            <param name="targetFilePath">Full path to the file to backup</param>
            <param name="versionCountToKeep">Maximum backup copies of the file to keep</param>
            <returns>True if the file was successfully renamed (also returns True if the target file does not exist)</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.CompactPathString(System.String,System.Int32)">
            <summary>
            Shorten pathToCompact to a maximum length of maxLength
            Examples:
            C:\...\B..\Finance..
            C:\...\W..\Business\Finances.doc
            C:\My Docum..\Word\Business\Finances.doc
            </summary>
            <param name="pathToCompact"></param>
            <param name="maxLength">Maximum length of the shortened path</param>
            <returns>Shortened path</returns>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileWithRetry(System.IO.FileInfo,System.String@)">
            <summary>
            Delete the file, retrying up to 3 times
            </summary>
            <param name="fiFile">File to delete</param>
            <param name="errorMessage">Output message: error message if unable to delete the file</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.DeleteFileWithRetry(System.IO.FileInfo,System.Int32,System.String@)">
            <summary>
            Delete the file, retrying up to retryCount times
            </summary>
            <param name="fiFile">File to delete</param>
            <param name="retryCount">Maximum number of times to retry the deletion, waiting 500 msec, then 750 msec between deletion attempts</param>
            <param name="errorMessage">Output message: error message if unable to delete the file</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.IsVimSwapFile(System.String)">
            <summary>
            Returns true if the file is _.swp or starts with a . and ends with .swp
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.String@)">
            <summary>
            Confirms that the drive for the target output file has a minimum amount of free disk space
            </summary>
            <param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
            <param name="minimumFreeSpaceMB">Minimum free disk space, in MB.  Will default to 150 MB if zero or negative</param>
            <param name="errorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
            <returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.ValidateFreeDiskSpace(System.String,System.Double,System.Double,System.String@)">
            <summary>
            Confirms that the drive for the target output file has a minimum amount of free disk space
            </summary>
            <param name="outputFilePath">Path to output file; defines the drive or server share for which we will determine the disk space</param>
            <param name="outputFileExpectedSizeMB">Expected size of the output file</param>
            <param name="minimumFreeSpaceMB">Minimum free disk space, in MB.  Will default to 150 MB if zero or negative.  Takes into account outputFileExpectedSizeMB</param>
            <param name="errorMessage">Output message if there is not enough free space (or if the path is invalid)</param>
            <returns>True if more than minimumFreeSpaceMB is available; otherwise false</returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.clsFileTools.WaitForLockFileQueue(System.Int64,System.IO.DirectoryInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Wait for the lock file queue to drop below a threshold
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="diLockFolderSource"></param>
            <param name="fiSourceFile"></param>
            <param name="maxWaitTimeMinutes"></param>
        </member>
        <member name="M:PRISM.clsFileTools.WaitForLockFileQueue(System.Int64,System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.IO.FileInfo,System.String,System.Int32)">
            <summary>
            Wait for the lock file queue to drop below a threshold
            </summary>
            <param name="lockFileTimestamp"></param>
            <param name="diLockFolderSource"></param>
            <param name="diLockFolderTarget"></param>
            <param name="fiSourceFile"></param>
            <param name="targetFilePath"></param>
            <param name="maxWaitTimeMinutes"></param>
        </member>
        <member name="T:PRISM.logMsgType">
            <summary>
            The type of log message.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logNormal">
            <summary>
            The message is informational.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logError">
            <summary>
            The message represents an error.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logWarning">
            <summary>
            The message represents a warning.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logDebug">
            <summary>
            The message is only for debugging purposes.
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logNA">
            <summary>
            The mesaage does not apply (to what?).
            </summary>
        </member>
        <member name="F:PRISM.logMsgType.logHealth">
            <summary>
            The message is an indicator of (in)correct operation.
            </summary>
        </member>
        <member name="T:PRISM.ILogger">
            <summary>
            Defines the logging interface.
            </summary>
        </member>
        <member name="P:PRISM.ILogger.CurrentLogFilePath">
            <summary>
            Current log file path
            </summary>
        </member>
        <member name="P:PRISM.ILogger.MostRecentLogMessage">
            <summary>
            Most recent log message
            </summary>
        </member>
        <member name="P:PRISM.ILogger.MostRecentErrorMessage">
            <summary>
            Most recent error
            </summary>
        </member>
        <member name="M:PRISM.ILogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="M:PRISM.ILogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="e">The exception associated with the error.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="T:PRISM.ILoggerAware">
            <summary>
            Defines the logging aware interface.
            </summary>
            <remarks>
            This interface is used by any class that wants to optionally support 
            logging to a logger that implements the ILogger interface.  The key
            here is the phrase optionally.  The class allows, but does not
            require the class user to supply an ILogger.  If the Logger is not
            specified, the class throws Exceptions and raises Events in the usual
            way.  If an ILogger is specified, the user has the option of just logging,
            or logging and throwing/raising Exceptions/Events in the usual way as well.
            </remarks>
        </member>
        <member name="M:PRISM.ILoggerAware.RegisterExceptionLogger(PRISM.ILogger)">
            <summary>
            Register an ILogger with a class to have it log any exception that might occur.
            </summary>
            <param name="logger">A logger object to be used when logging is desired.</param>
        </member>
        <member name="M:PRISM.ILoggerAware.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Register an ILogger with a class to have it log any event that might occur.
            </summary>
            <param name="logger">A logger object to be used when logging is desired.</param>
        </member>
        <member name="P:PRISM.ILoggerAware.NotifyOnEvent">
            <summary>
            Set true and the class will raise events.  Set false and it will not.
            </summary>
            <remarks>A function like the one shown below can be placed in ILoggerAware class that will only raise the event in the
            event of one needing to be raised.
            </remarks>
        </member>
        <member name="P:PRISM.ILoggerAware.NotifyOnException">
            <summary>
            Set true and the class will throw exceptions.  Set false and it will not
            </summary>
            <remarks>A function like this can be place in ILoggerAware class that will only throw an exception in the
            event of one needing to be thrown.
            </remarks>
        </member>
        <member name="T:PRISM.Utilities">
            <summary>
            Utility functions
            </summary>
        </member>
        <member name="M:PRISM.Utilities.GetExceptionStackTrace(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a compact description of the current stack
            </summary>
            <param name="objException"></param>
            <returns>
            String of the form:
            "Stack trace: clsCodeTest.Test-:-clsCodeTest.TestException-:-clsCodeTest.InnerTestException in clsCodeTest.vb:line 86"
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="M:PRISM.Utilities.GetExceptionStackTraceMultiLine(System.Exception)">
            <summary>
            Parses the StackTrace text of the given exception to return a cleaned up description of the current stack,
            with one line for each function in the call tree
            </summary>
            <param name="ex">Exception</param>
            <returns>
            Stack trace: 
              clsCodeTest.Test
              clsCodeTest.TestException
              clsCodeTest.InnerTestException 
               in clsCodeTest.vb:line 86
            </returns>
            <remarks>Useful for removing the full file paths included in the default stack trace</remarks>
        </member>
        <member name="T:PRISM.clsFileLogger">
            <summary>
            Provides logging to a local file.
            </summary>
            <remarks>
            The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".
            </remarks>
        </member>
        <member name="F:PRISM.clsFileLogger.m_logFileName">
            <summary>
            Log file path
            </summary>
        </member>
        <member name="F:PRISM.clsFileLogger.m_programName">
            <summary>
            Program name
            </summary>
        </member>
        <member name="F:PRISM.clsFileLogger.m_programVersion">
            <summary>
            Program version
            </summary>
        </member>
        <member name="M:PRISM.clsFileLogger.#ctor">
            <summary>
            Initializes a new instance of the clsFileLogger class.
            </summary>
        </member>
        <member name="M:PRISM.clsFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the clsFileLogger class which logs to the specified file.
            </summary>
            <param name="filePath">The name of the file to use for the log.</param>
            <remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks>
        </member>
        <member name="P:PRISM.clsFileLogger.ExecutableVersion">
            <summary>
            Gets the product version associated with this application.
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.ExecutableName">
            <summary>
            Gets the name of the executable file that started the application.
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.LogFilePath">
            <summary>
            The name of the file being used as the log.
            </summary>
            <remarks>The actual log file name changes daily and is of the form "filePath_mm-dd-yyyy.txt".</remarks>
        </member>
        <member name="P:PRISM.clsFileLogger.MostRecentLogMessage">
            <summary>
            Most recent log message
            </summary>
        </member>
        <member name="P:PRISM.clsFileLogger.MostRecentErrorMessage">
            <summary>
            Most recent error message
            </summary>
        </member>
        <member name="M:PRISM.clsFileLogger.LogToFile(System.String,PRISM.logMsgType)">
            <summary>
            Writes a message to the log file.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
        </member>
        <member name="M:PRISM.clsFileLogger.TypeToString(PRISM.logMsgType)">
            <summary>
            Converts enumerated error type to string for logging output.
            </summary>
            <param name="MyErrType">The ILogger error type.</param>
        </member>
        <member name="M:PRISM.clsFileLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="M:PRISM.clsFileLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="ex">The exception associated with the error.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="T:PRISM.clsDBLogger">
            <summary>
            Provides logging to a database and local file.
            </summary>
            <remarks>The module name identifies the logging process; if not defined, will use MachineName:UserName</remarks>
        </member>
        <member name="F:PRISM.clsDBLogger.m_moduleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor">
            <summary>
            Initializes a new instance of the clsDBLogger class.
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database.
            </summary>
            <param name="connectionStr">The connection string used to access the database.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database and file.
            </summary>
            <param name="connectionStr">The connection string used to access the database.</param>
            <param name="filePath">The name of the file to use for the log.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the clsDBLogger class which logs to the specified database and file.
            </summary>
            <param name="modName">The string used to identify the posting process.</param>
            <param name="connectionStr">The connection string used to access the database.</param>
            <param name="filePath">The name of the file to use for the log.</param>
            <remarks>The module name identifies the logging process; if not defined, will use MachineName:UserName</remarks>
        </member>
        <member name="P:PRISM.clsDBLogger.ConnectionString">
            <summary>
            The connection string used to access the database.
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.MachineName">
            <summary>
            The module name identifies the logging process.
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.UserName">
            <summary>
            The module name identifies the logging process.
            </summary>
        </member>
        <member name="M:PRISM.clsDBLogger.ConstructModuleName">
            <summary>
            Construct the string MachineName:UserName.
            </summary>
        </member>
        <member name="P:PRISM.clsDBLogger.ModuleName">
            <summary>
            The module name identifies the logging process.
            </summary>
            <remarks>If the module name is not specified, it is filled in as
            MachineName:UserName.</remarks>
        </member>
        <member name="M:PRISM.clsDBLogger.LogToDB(System.String,PRISM.logMsgType)">
            <summary>
            Writes a message to the log table.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts an error to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="e">The exception associated with the error.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.PostLogEntry(System.String,System.String)">
            <summary>
            Writes a message to the log table via the stored procedure.
            </summary>
            <param name="type">The ILogger error type.</param>
            <param name="message">The message to post.</param>
        </member>
        <member name="M:PRISM.clsDBLogger.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Event handler for InfoMessage event.
            </summary>
            <remarks>Errors and warnings sent from the SQL Server database engine are caught here.</remarks>
        </member>
        <member name="T:PRISM.clsQueLogger">
            <summary>
            Wraps a queuing mechanism around any object that implements ILogger interface.
            </summary>
            <remarks>The posting member functions of this class put the log entry
            onto the end of an internal queue and return very quickly to the caller.
            A separate thread within the class is used to perform the actual output of
            the log entries using the logging object that is specified
            in the constructor for this class.</remarks>
        </member>
        <member name="T:PRISM.clsQueLogger.clsLogEntry">
            <summary>
            A class to hold a log entry in the internal queue.
            </summary>
            <remarks>It holds the three arguments to PostEntry.</remarks>
        </member>
        <member name="F:PRISM.clsQueLogger.clsLogEntry.message">
            <summary>
            Log message
            </summary>
        </member>
        <member name="F:PRISM.clsQueLogger.clsLogEntry.entryType">
            <summary>
            Log message type
            </summary>
        </member>
        <member name="F:PRISM.clsQueLogger.clsLogEntry.localOnly">
            <summary>
            When true, log to the local file but not to the database
            </summary>
        </member>
        <member name="M:PRISM.clsQueLogger.#ctor(PRISM.ILogger)">
            <summary>
            Constructor: Initializes a new instance of the clsQueLogger class which logs to the ILogger.
            </summary>
            <param name="logger">The target logger object.</param>
        </member>
        <member name="M:PRISM.clsQueLogger.KickTheOutputThread">
            <summary>
            Start the log output thread if it isn't already running.
            </summary>
        </member>
        <member name="M:PRISM.clsQueLogger.LogFromQueue">
            <summary>
            Pull all entries from the queue and output them to the log streams.
            </summary>
        </member>
        <member name="M:PRISM.clsQueLogger.PostEntry(System.String,PRISM.logMsgType,System.Boolean)">
            <summary>
            Writes a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="EntryType">The ILogger error type.</param>
            <param name="localOnly"></param>
        </member>
        <member name="M:PRISM.clsQueLogger.PostError(System.String,System.Exception,System.Boolean)">
            <summary>
            Posts a message to the log.
            </summary>
            <param name="message">The message to post.</param>
            <param name="e">The exception associated with the error.</param>
            <param name="localOnly">Post message locally only.</param>
        </member>
        <member name="T:PRISM.ShareConnector">
            <summary>
            Connects to a file share using a password and user name.
            </summary>
            <remarks>
            The default behaviour when connecting to SMB/CIFS file shares is for
            the system to supply the user name and password used to logon to the local machine.
            This class allows you to connect to SMB/CIFS file shares when the use of
            SSPI isn't availabe and/or when you don't wish to use the default behaviour.
            It's quite comparable to the "Connect using a different user name." option in the Map Network Drive
            utility in Windows.  Much of this code came from Microsoft Knowledge Base Article - 173011.  It was
            then modified to fit our needs.
            </remarks>
        </member>
        <member name="T:PRISM.ShareConnector.udtNetResource">
            <summary>
            This structure is used to group a bunch of member variables.
            </summary>
        </member>
        <member name="F:PRISM.ShareConnector.RESOURCEUSAGE_CONNECTABLE">
            <summary>
             Constant that may be used by NETRESOURCE->dwUsage 
            </summary>
        </member>
        <member name="F:PRISM.ShareConnector.RESOURCEUSAGE_CONTAINER">
            <summary>
             Constant that may be used by NETRESOURCE->dwUsage 
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.#ctor(System.String,System.String)">
            <summary>
            This version of the constructor requires you to specify the sharename by setting the <see cref="P:PRISM.ShareConnector.Share">Share</see> property.
            </summary>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
            <remarks>For local user accounts, it is safest to use HostName\username</remarks>
        </member>
        <member name="M:PRISM.ShareConnector.#ctor(System.String,System.String,System.String)">
            <summary>
            This version of the constructor allows you to specify the sharename as an argument.
            </summary>
            <param name="shareName">The name of the file share to which you will connect.</param>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
            <remarks>For local user accounts, it is safest to use HostName\username</remarks>  /// 
        </member>
        <member name="M:PRISM.ShareConnector.RealNew(System.String,System.String)">
            <summary>
            This routine is called by each of the constructors to make the actual assignments in a consistent fashion.
            </summary>
            <param name="userName">Username</param>
            <param name="userPwd">Password</param>
        </member>
        <member name="P:PRISM.ShareConnector.Share">
            <summary>
            Sets the name of the file share to which you will connect.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.Connect(System.String)">
            <summary>
            Connects to specified share using account/password specified through the constructor and 
            the file share name passed as an argument.
            </summary>
            <param name="shareName">The name of the file share to which you will connect.</param>
        </member>
        <member name="M:PRISM.ShareConnector.Connect">
            <summary>
            Connects to specified share using account/password specified through the constructor.
            Requires you to have specifyed the sharename by setting the <see cref="P:PRISM.ShareConnector.Share">Share</see> property.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.DefineShareName(System.String)">
            <summary>
            Updates class variable with the specified share path
            </summary>
            <param name="shareName"></param>
            <remarks>If the path ends in a forward slash then the slash will be removed</remarks>
        </member>
        <member name="M:PRISM.ShareConnector.RealConnect">
            <summary>
            Connects to specified share using account/password specified previously.
            This is the function that actually does the connection based on the setup 
            from the Connect function.
            </summary>
        </member>
        <member name="M:PRISM.ShareConnector.Disconnect">
            <summary>
            Disconnects the files share.
            </summary>
        </member>
        <member name="P:PRISM.ShareConnector.ErrorMessage">
            <summary>
            Gets the error message returned by the Connect and Disconnect functions.
            </summary>
        </member>
        <member name="T:PRISM.XMLFileReader">
            <summary>
            Tools for manipulating XML settings files
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the XMLFileReader (non case-sensitive)
            </summary>
            <param name="xmlFilename">The name of the XML file.</param>
            <param name="isCaseSensitive"></param>
            <param name="notifyOnException">When true, raise event InformationMessage if an exception occurs</param>
            <param name="notifyOnEvent">When true, raise event InformationMessage when the XML file is saved</param>
        </member>
        <member name="P:PRISM.XMLFileReader.IniFilename">
            <summary>
            Legacy property; calls XmlFilename
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XmlFilename">
            <summary>
            This routine returns the name of the ini file.
            </summary>
            <return>The function returns the name of ini file.</return>
        </member>
        <member name="P:PRISM.XMLFileReader.Initialized">
            <summary>
            This routine returns a boolean showing if the file was initialized or not.
            </summary>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="P:PRISM.XMLFileReader.CaseSensitive">
            <summary>
            This routine returns a boolean showing if the name is case sensitive or not.
            </summary>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetNameCase(System.String)">
            <summary>
            This routine sets a name.
            </summary>
            <param name="aName">The name to be set.</param>
            <return>The function returns a string.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetRoot">
            <summary>
            Returns the root element of the XML document
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetLastSection">
            <summary>
            The function gets the last section.
            </summary>
            <return>The function returns the last section as System.Xml.XmlElement.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetSection(System.String)">
            <summary>
            The function gets a section as System.Xml.XmlElement.
            </summary>
            <param name="sectionName">The name of a section.</param>
            <return>The function returns a section as System.Xml.XmlElement.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetItem(System.String,System.String)">
            <summary>
            The function gets an item.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <return>The function returns a XML element.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniSection(System.String,System.String)">
            <summary>
            Legacy function name; calls SetXMLSection
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLSection(System.String,System.String)">
            <summary>
            The function sets the ini section name.
            </summary>
            <param name="oldSection">The name of the old ini section name.</param>
            <param name="newSection">The new name for the ini section.</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniValue(System.String,System.String,System.String)">
            <summary>
            Legacy function name; calls SetXMLValue
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLValue(System.String,System.String,System.String)">
            <summary>
            The function sets a new value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.DeleteSection(System.String)">
            <summary>
            The function deletes a section in the file.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a boolean that shows if the delete was completed.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.DeleteItem(System.String,System.String)">
            <summary>
            The function deletes a item in a specific section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <return>The function returns a boolean that shows if the delete was completed.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniKey(System.String,System.String,System.String)">
            <summary>
            Legacy function name; calls SetXmlKey
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXmlKey(System.String,System.String,System.String)">
            <summary>
            The function sets a new value for the "key" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "key".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetIniValue(System.String,System.String)">
            <summary>
            Legacy function name; calls GetXMLValue
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetXMLValue(System.String,System.String)">
             <summary>
             The function gets the name of the "value" attribute.
             </summary>
             <param name="sectionName">The name of the section.</param>
             <param name="keyName">The name of the key.</param>
            <return>The function returns the name of the "value" attribute.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetIniComments(System.String)">
            <summary>
            Legacy function name; calls GetXmlSectionComments
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.GetXmlSectionComments(System.String)">
             <summary>
             The function gets the comments for a section name.
             </summary>
             <param name="sectionName">The name of the section.</param>
            <return>The function returns a string collection with comments</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetIniComments(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Legacy function name; calls SetXMLComments
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.SetXMLComments(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             The function sets a the comments for a section name.
             </summary>
             <param name="sectionName">The name of the section.</param>
             <param name="comments">A string collection.</param>
            <return>The function returns a Boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.UpdateSections">
            <summary>
            The subroutine updades the sections.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.AllSections">
            <summary>
            The subroutine gets the sections.
            </summary>
            <return>The subroutine returns a strin collection of sections.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetItemsInSection(System.String,PRISM.XMLFileReader.XMLItemTypeEnum)">
            <summary>
            The function gets a collection of items for a section name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="itemType">Item type.</param>
            <return>The function returns a string colection of items in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllKeysInSection(System.String)">
            <summary>
            Gets a collection of keys in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the keys in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllValuesInSection(System.String)">
            <summary>
            Gets a collection of values in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the values in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.AllItemsInSection(System.String)">
            <summary>
            Gets a collection of items in a section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <return>The function returns a string colection of all the items in a section.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.GetCustomIniAttribute(System.String,System.String,System.String)">
            <summary>
            Gets a custom attribute name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="attributeName">The name of the attribute.</param>
            <return>The function returns a string.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.SetCustomIniAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Sets a custom attribute name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="attributeValue">The value of the attribute.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.CreateSection(System.String)">
            <summary>
            Creates a section name.
            </summary>
            <param name="sectionName">The name of the section to be created.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.CreateItem(System.String,System.String,System.String)">
            <summary>
            Creates a section name.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value to be created.</param>
            <return>The function returns a Boolean.</return>
        </member>
        <member name="M:PRISM.XMLFileReader.ManualParseXmlOrIniFile(System.String)">
            <summary>
            Manually read a XML or .INI settings file line-by-line, extracting out any settings in the expected format
            </summary>
            <param name="strFilePath"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PRISM.XMLFileReader.ParseLineManual(System.String,System.Xml.XmlDocument)">
            <summary>Manually parses a line to extract the settings information
            Supports the traditional .Ini file format
            Also supports the 'key="KeyName" value="Value"' method used in XML settings files
            If success, then adds attributes to the doc var</summary>
            <param name="strLine">The name of the string to be parse.</param>
            <param name="doc">The name of the System.Xml.XmlDocument.</param>
            <returns>True if success, false if not a recognized line format</returns>
        </member>
        <member name="P:PRISM.XMLFileReader.OutputFilename">
            <summary>
            It Sets or Gets the output file name.
            </summary>
        </member>
        <member name="M:PRISM.XMLFileReader.Save">
            <summary>
            It saves the data to the Xml output file.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XmlDoc">
            <summary>
            Gets the System.Xml.XmlDocument.
            </summary>
        </member>
        <member name="P:PRISM.XMLFileReader.XML">
            <summary>
            Converts an XML document to a string.
            </summary>
            <return>It returns the XML document formatted as a string.</return>
        </member>
        <member name="T:PRISM.XmlSettingsFileAccessor">
            <summary>
            This class can be used to read or write settings in an Xml settings file
              Based on a class from the DMS Analysis Manager software written by Dave Clark and Gary Kiebel (PNNL, Richland, WA)
              Additional features added by Matthew Monroe for the Department of Energy (PNNL, Richland, WA) in October 2003
            Updated in October 2004 to truly be case-insensitive if isCaseSensitive = False when calling LoadSettings()
            Updated in August 2007 to remove the PRISM.Logging functionality and to include class XMLFileReader inside class XmlSettingsFileAccessor
            Updated in December 2010 to rename vars from Ini to XML
            </summary>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings">
            <summary>
            Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
            </summary>
            <return>The function returns a boolean that shows if the file was successfully loaded.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings(System.String)">
            <summary>
            Loads the settings for the defined Xml Settings File.   Assumes names are not case sensitive
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
            <return>The function returns a boolean that shows if the file was successfully loaded.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.LoadSettings(System.String,System.Boolean)">
            <summary>
            Loads the settings for the defined Xml Settings File
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
            <param name="isCaseSensitive">Case sensitive names if True. Non-case sensitive if false.</param>
            <remarks>If case sensitive names are in place, all section and key names must be lowercase</remarks>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SaveSettings">
            <summary>
            Saves the settings for the defined Xml Settings File.  Note that you must call LoadSettings to initialize the class prior to setting any values.
            </summary>
            <return>The function returns a boolean that shows if the file was successfully saved.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SectionPresent(System.String)">
            <summary>
            Checks if a section is present in the settings file.
            </summary>
            <param name="sectionName">The name of the section to look for.</param>
            <return>The function returns a boolean that shows if the section is present.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a String.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns boolean True if the "value" attribute is "true".  Otherwise, returns boolean False.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a Short.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as an Integer.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a Long.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a Single.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double,System.Boolean@)">
            <summary>
            The function gets the name of the "value" attribute in section "sectionName".
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
            <param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
            <return>The function returns the name of the "value" attribute as a Double.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetIniFilePath(System.String)">
            <summary>
            Legacy function name; calls SetXMLFilePath
            </summary>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetXMLFilePath(System.String)">
            <summary>
            The function sets the path to the Xml Settings File.
            </summary>
            <param name="XmlSettingsFilePath">The path to the XML settings file.</param>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.String)">
            <summary>
            The function sets a new String value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Boolean)">
            <summary>
            The function sets a new Boolean value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int16)">
            <summary>
            The function sets a new Short value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int32)">
            <summary>
            The function sets a new Integer value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int64)">
            <summary>
            The function sets a new Long value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Single)">
            <summary>
            The function sets a new Single value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Double)">
            <summary>
            The function sets a new Double value for the "value" attribute.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="keyName">The name of the key.</param>
            <param name="newValue">The new value for the "value".</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="M:PRISM.XmlSettingsFileAccessor.RenameSection(System.String,System.String)">
            <summary>
            The function renames a section.
            </summary>
            <param name="sectionNameOld">The name of the old XML section name.</param>
            <param name="sectionNameNew">The new name for the XML section.</param>
            <return>The function returns a boolean that shows if the change was done.</return>
        </member>
        <member name="T:PRISM.ZipTools">
            <summary>
            Makes using a file archiving program easier.
            </summary>
            <remarks>There are a routines to create an archive, extract files from an existing archive,
            and to verify an existing archive.
            </remarks>
        </member>
        <member name="M:PRISM.ZipTools.MakeZipFile(System.String,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="CmdOptions">The zip program command line arguments.</param>
            <param name="OutputFile">The file path of the output zip file.</param>
            <param name="InputSpec">The files and/or directorys to archive.</param>
        </member>
        <member name="M:PRISM.ZipTools.UnzipFile(System.String,System.String,System.String)">
            <summary>
            Extract files from a zip file.
            </summary>
            <param name="CmdOptions">The zip program command line arguments.</param>
            <param name="InputFile">The file path of the zip file from which to extract files.</param>
            <param name="OutPath">The path where you want to put the extracted files.</param>
        </member>
        <member name="P:PRISM.ZipTools.CreateNoWindow">
            <summary>
            Defines whether a window is displayed when calling the zipping program.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.WindowStyle">
            <summary>
            Window style to use when CreateNoWindow is False.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.WorkDir">
            <summary>
            The working directory for the zipping process.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.ZipFilePath">
            <summary>
            The path to the zipping program.
            </summary>
        </member>
        <member name="M:PRISM.ZipTools.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ZipTools class.
            </summary>
            <param name="WorkDir">The working directory for the zipping process.</param>
            <param name="ZipFilePath">The path to the zipping program.</param>
        </member>
        <member name="M:PRISM.ZipTools.VerifyZippedFile(System.String)">
            <summary>
            Verifies the integrity of a zip file.
            </summary>
            <param name="FilePath">The file path of the zip file to verify.</param>
        </member>
        <member name="M:PRISM.ZipTools.RegisterEventLogger(PRISM.ILogger)">
            <summary>
            Sets the name of the event logger
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.NotifyOnEvent">
            <summary>
            Gets or Sets notify on event.
            </summary>
        </member>
        <member name="P:PRISM.ZipTools.NotifyOnException">
            <summary>
            Gets or Sets notify on exception.
            </summary>
        </member>
    </members>
</doc>
