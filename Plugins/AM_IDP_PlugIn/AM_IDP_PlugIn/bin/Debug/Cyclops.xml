<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cyclops</name>
    </assembly>
    <members>
        <member name="T:Cyclops.VisualizationModules.clsVisualizationParameterHandler">
            <summary>
            This class holds the parameters used by all other Visualization classes 
            to create plots
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsVisualizationParameterHandler.#ctor">
            Basic constructor
        </member>
        <member name="M:Cyclops.VisualizationModules.clsVisualizationParameterHandler.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="Parameters">Dictionary of Visualization Parameters</param>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.BoxWidth">
            <summary>
            Width of box in plot, defaults to 1
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.ConsolidationFactor">
            <summary>
            Consolidation Factor passed in through the ATM
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.Factor">
            <summary>
            Index for Factor, defaults to 1
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.FixedEffect">
            <summary>
            Fixed Effect Factor passed in through the ATM
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.Color">
            <summary>
            Color used in graph/plot, defaults to cornflowerblue
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.ColorByFactor">
            <summary>
            Whether to color by the factor info, defaults to FALSE
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.ColumnFactorTable">
            <summary>
            Name of the Column Factor table
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.DoYLim">
            <summary>
            Use y limits, defaults to FALSE
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.FileName">
            <summary>
            Name to save the plot file to
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.LabelScale">
            <summary>
            Scale for labels, defaults to 0.8
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.ShowCount">
            <summary>
            Whether to show counts, defaults to TRUE
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.ShowLegend">
            <summary>
            Whether to show a legend or not, defaults to TRUE
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.SkipTheFirstColumn">
            <summary>
            true/false indicating whether or not to skip the first column (in cases where PeptideCount is present)
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.Outliers">
            <summary>
            Whether to include outliers, defaults to TRUE
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.Stamp">
            <summary>
            Defaults to NULL
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.Resolution">
            <summary>
            Resolution of the image, default 600
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.RowFactorTable">
            <summary>
            Name of the Row Factor table
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.yMin">
            <summary>
            Y minimum
            </summary>
        </member>
        <member name="P:Cyclops.VisualizationModules.clsVisualizationParameterHandler.yMax">
            <summary>
            Y maximum
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsLoadRWorkspaceModule">
            <summary>
            Given a pre-existing RData Workspace, this module will load that workspace into the R environment.
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsBaseDataModule">
            <summary>
            Base class for Data Modules
            </summary>
        </member>
        <member name="T:Cyclops.clsBaseModule">
            <summary>
            Main Base class for the pipeline modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.AddDataChild(Cyclops.DataModules.clsBaseDataModule)">
            <summary>
            Adds a child data module
            </summary>
            <param name="Child">Data Child Module to Add</param>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.AddVisualChild(Cyclops.VisualizationModules.clsBaseVisualizationModule)">
            <summary>
            Adds a child visualization module
            </summary>
            <param name="Child">Visualization Child Module to Add</param>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.AddExportChild(Cyclops.ExportModules.clsBaseExportModule)">
            <summary>
            Adds a child export module
            </summary>
            <param name="Child">Export Child Module to Add</param>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.PerformOperation">
            <summary>
            Runs the module's operation
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.RunChildModules">
            <summary>
            Runs the child modules in order: 1. visualization, 2. export, 3. data
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.PrintChildModules">
            <summary>
            Prints the modules name to the console
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBaseDataModule.GetOrganizedFactorsVector(System.String,System.String,System.String,System.String)">
            <summary>
            Organizes the ColumnMetadataTable so that the factors column will directly
            match the columns of the data table.
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
            <param name="NameOfDataTable">The Data Table</param>
            <param name="NameOfColumnMetadataTable">The Column Metadata Table</param>
            <param name="FactorColumn">Name of the column that contains the factor of interest</param>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.#ctor">
            <summary>
            Loads in existing R workspace
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.#ctor(System.String)">
            <summary>
            Loads in existing R workspace
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Loads in existing R workspace
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsLoadRWorkspaceModule.TestLoadRWorkspace">
            <summary>
            Unit Test for Loading an R Workspace
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.clsCyclopsModel">
            <summary>
            Model class serves as the entry point for the Cyclops DLL
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.#ctor">
            <summary>
            Basic constructor for the Model class
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor that requires the parameters for running cyclops
            </summary>
            <param name="ParametersForCyclops">Parameters for running cyclops</param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.#ctor(System.String)">
            <summary>
            Constructor that requires the path to R DLL
            </summary>
            <param name="RDLL">Path to R DLL</param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.SetREngineDLL(System.String)">
            <summary>
            Sets the path the R DLL
            </summary>
            <param name="RDLL">Path to the R DLL</param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.CreateInstanceOfR">
            <summary>
            Creates a new instance of the R workspace
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.CreateInstanceOfR_AndLoadWorkspace(System.String)">
            <summary>
            Loads a R workspace
            </summary>
            <param name="Workspace"></param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.AssembleModulesFromXML">
            <summary>
            Reads an XML workflow provided in CyclopsParameters and assembles 
            the modules for the pipeline
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.AssembleModulesFromXML(System.String)">
            <summary>
            Read the XML workflow file and assemble the pipeline
            </summary>
            <param name="WorkFlowFile">Full path to the XML file</param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.AssembleModulesFromXML(System.String,System.String)">
            <summary>
            Read the XML workflow file and assemble the pipeline
            </summary>
            <param name="WorkFlowFile">Full path to the XML file</param>
            <param name="RDLL">Path to R</param>
        </member>
        <member name="M:Cyclops.clsCyclopsModel.Run">
            <summary>
            Runs the Cyclops Pipeline
            </summary>
        </member>
        <member name="P:Cyclops.clsCyclopsModel.NumberOfModules">
            <summary>
            The total number of modules to be run in pipeline.
            </summary>
        </member>
        <member name="P:Cyclops.clsCyclopsModel.SuccessRunningPipeline">
            <summary>
            Flag to indicate if the pipeline completed successfully.
            </summary>
        </member>
        <member name="P:Cyclops.clsCyclopsModel.Root">
            <summary>
            Root module of Cyclops Pipeline
            </summary>
        </member>
        <member name="P:Cyclops.clsCyclopsModel.CurrentNode">
            <summary>
            Pointer to current module in Cyclops Pipeline
            </summary>
        </member>
        <member name="P:Cyclops.clsCyclopsModel.CyclopsParameters">
            <summary>
            Dictionary of Parameters for running Cyclops
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsRSourceFileModule">
            <summary>
            Loads all the R source files in the directory and subdirectories
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.#ctor">
            <summary>
            Loads all necessary R scripts in the workspace
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.#ctor(System.String)">
            <summary>
            Loads all necessary R scripts in the workspace
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Loads all necessary R scripts in the workspace
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.Run_LoadRSourceFiles">
            <summary>
            Externally accessible function to load the R source files
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.GetDirectoriesAndLoadRSourceFiles(System.String,System.String)">
            <summary>
            Iterative function that parses through directories, runs all R source files in the 
            directory, then iterates through the subdirectories
            </summary>
            <param name="MyDirectory">Path to Directory</param>
            <param name="RInstance">Instance of R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.LoadRSourceFile(System.String,System.String)">
            <summary>
            Loads a R source file (*.R) into the workspace environment
            </summary>
            <param name="MyFile">Name of the source file to load</param>
            <param name="RInstance">Instance of R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRSourceFileModule.TestLoadRSourceFiles">
            <summary>
            Unit Test for Loading R Source Files
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsImportDataModule">
            <summary>
            Class pulls tables from SQLite, CSV, TSV, MSAccess, or SQLServer and 
            adds them as DataFrames in R. Designed to created ExpressionSets in 
            R for further data analysis.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.#ctor">
            <summary>
            Module capable of reading in data from multiple sources
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.#ctor(System.String)">
            <summary>
            Module capable of reading in data from multiple sources
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module capable of reading in data from multiple sources
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.ConnectToSQLiteDatabase">
            <summary>
            Creates a connection to a sqlite database
            </summary>
            <param name="RInstance">Instance of your R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.DisconnectFromDatabase">
            <summary>
            Terminates the connection to the SQLite database, releasing control of the database.
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetAssayDataFromSQLiteDB">
            <summary>
            Retrieves a table from the SQLite database and converts it to
            an AssayData table that can be easily entered into an
            ExpressionSet
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetPhenotypeDataFromSQLiteDB">
            <summary>
            Gets the Phenotypic metadata (column metadata) for the 
            Expression set
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetFeatureDataFromSQLiteDB">
            <summary>
            Gets the Feature metadata (row metadata) for the 
            Expression set
            </summary>
            <param name="s_RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetDataTableFromSQLiteDB">
            <summary>
            Pulls a data table from a SQLite database, and cleans it up
            so there are no row duplicates
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetColumnMetadataFromSQLiteDB">
            <summary>
            Pulls a column metadata table from a SQLite database, and
            cleans it up so there are no row duplicates
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.GetRowMetadataFromSQLiteDB">
            <summary>
            Pulls the row metadata table from a SQLite database, and
            cleans it up so there are no row duplicates
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.SetTableRowNames(System.String)">
            <summary>
            Sets the rownames for a table in R and removes that column from the table
            </summary>
            <param name="TableName">Name of the table</param>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.TestCSV_FileImport">
            <summary>
            Unit Test for Importing a CSV file
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.TestTSV_FileImport">
            <summary>
            Unit Test for Importing a TSV file
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.TestImportDataTableFromSQLite">
            <summary>
            Unit Test for Importing a Data Table from a SQLite database
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.TestImportRowMetadataTableFromSQLite">
            <summary>
            Unit Test for Importing a Row Metadata Table from a SQLite database
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsImportDataModule.TestImportColumnMetadataTableFromSQLite">
            <summary>
            Unit Test for Importing a Column Metadata Table from a SQLite database
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsDataTableManipulation">
            <summary>
            Brings DataFrames and Matrices from R over to C# for further manipulation
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsDataTableManipulation.#ctor">
            <summary>
            Module that brings DataFrames and Matrices from R over to C# for further manipulation
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsDataTableManipulation.#ctor(System.String)">
            <summary>
            Module that brings DataFrames and Matrices from R over to C# for further manipulation
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsDataTableManipulation.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module that brings DataFrames and Matrices from R over to C# for further manipulation
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsDataTableManipulation.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsCombineSpectralCountResultFiles">
            <summary>
            This is a specialized class specifically for combining tables 
            following a spectral counting analysis
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCombineSpectralCountResultFiles.#ctor">
            <summary>
            Special module for combining tables from a spectral count analysis
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCombineSpectralCountResultFiles.#ctor(System.String)">
            <summary>
            Special module for combining tables from a spectral count analysis
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCombineSpectralCountResultFiles.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Special module for combining tables from a spectral count analysis
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCombineSpectralCountResultFiles.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCombineSpectralCountResultFiles.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsQCFractionHeatmap">
            <summary>
            Plots QC Fractions heatmap by calling the ja_QCFractionsHeat function in QualityControl.R
            
            Parameters include:
            tableName:          Name of table in R workspace as source for plot
            plotFileName:       Name of the file to return in the Plots directory
            
            backgroundColor:    Color of plot background        Defaults to white
            width:              Width of the plot in pixels     Defaults to 1200
            height:             Height of the plot in pixels    Defaults to 1200
            fontSize:           Size of font text in plot       Defaults to 12
            resolution:         Resolution of plot              Defaults to 600
            </summary>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsBaseVisualizationModule">
            <summary>
            Base class for visualization modules
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBaseVisualizationModule.CreatePlotsFolder">
            <summary>
            Creates a directory to store image files
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsQCFractionHeatmap.#ctor">
            <summary>
            Plots the QC fraction heatmap
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsQCFractionHeatmap.#ctor(System.String)">
            <summary>
            Plots the QC fraction heatmap
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsQCFractionHeatmap.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Plots the QC fraction heatmap
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsQCFractionHeatmap.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsQCFractionHeatmap.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.Operations.clsSpectralCountMainOperation">
            <summary>
            Provides an operation pipeline for conducting a general spectral count analysis
            </summary>
        </member>
        <member name="T:Cyclops.Operations.clsBaseOperationModule">
            <summary>
            Base Operation Module
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsBaseOperationModule.GetParameters(System.Data.DataRow[])">
            <summary>
            Returns the parameters in a format that a Cyclops Operation can read
            </summary>
            <param name="Parameters">The array of DataRows that contain my parameters</param>
            <returns>The Dictionary of parameters for a Cyclops Operation</returns>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.#ctor">
            <summary>
            Operation performs a general spectral count analysis
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.#ctor(System.String)">
            <summary>
            Operation performs a general spectral count analysis
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Operation performs a general spectral count analysis
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.PerformOperation">
            <summary>
            Runs operation
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.ConstructModules">
            <summary>
            Retrieves the table from the Operations database and assembles the Modules 
            into a pipeline.
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.AddDataModule(System.Data.DataRow[])">
            <summary>
            Adds a Data Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.AddExportModule(System.Data.DataRow[])">
            <summary>
            Adds an Export Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsSpectralCountMainOperation.AddVisualModules(System.Data.DataRow[])">
            <summary>
            Adds a Visual Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="T:Cyclops.ExportModules.clsQC_Fraction_HTML">
            <summary>
            Required Parameters:
            tableName:  name of the table to use
            fileName:   name of the html file name to save the QC plot
            
            canvasHeight:   height of the canvas element in html file
            rectHeight:     height of the rectangles
            overlapHeight:  related to rectangle height
            margin:         margin around the canvas element in the html
            headerFontSize: font size for "Fractions" at top of html
            fontSize:       font size for text in html file
            
            includeHeatmap: true or false, whether to include the heatmap in the html file
            </summary>
        </member>
        <member name="T:Cyclops.ExportModules.clsBaseExportModule">
            <summary>
            Base Export Module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.#ctor">
            <summary>
            Exports an HTML file that displays the QC for 2D-LC fractions
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.#ctor(System.String)">
            <summary>
            Exports an HTML file that displays the QC for 2D-LC fractions
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Exports an HTML file that displays the QC for 2D-LC fractions
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.BuildHtmlFile">
            <summary>
            Construct the HTML file
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsQC_Fraction_HTML.WriteTable(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates the html code to display a table on the webpage
            </summary>
            <param name="Table">Table to display</param>
            <param name="alignment">How to align the table on the page, eg. left, center, right</param>
            <param name="border">Size of border</param>
            <param name="TabSpaces">Number of tab spaces before the table tag</param>
            <returns></returns>
        </member>
        <member name="T:Cyclops.DataModules.clsPValueAdjust">
            <summary>
            Parameters:
            inputTableName: table to perform linear regression on
            newTableName: new table name
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsPValueAdjust.#ctor">
            <summary>
            Module to adjust p-values to correct to multiple comparisons
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsPValueAdjust.#ctor(System.String)">
            <summary>
            Module to adjust p-values to correct to multiple comparisons
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsPValueAdjust.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to adjust p-values to correct to multiple comparisons
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsPValueAdjust.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsLinearRegression">
            <summary>
            Parameters:
            inputTableName: table to perform linear regression on
            newTableName: new table name
            factorTable: name of the column factor table
            variable: '1', '2', '3' representing 1) first dataset, 2) median, and 3) dataset with least missing data
            
            uses the consolidation factor for dataset replicates
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsLinearRegression.#ctor">
            <summary>
            Module to perform linear regression on datasets
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsLinearRegression.#ctor(System.String)">
            <summary>
            Module to perform linear regression on datasets
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsLinearRegression.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to perform linear regression on datasets
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsLinearRegression.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsDataModuleParameterHandler">
            <summary>
            This class holds the parameters used by all other Data classes 
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsDataModuleParameterHandler.#ctor">
            Basic constructor
        </member>
        <member name="M:Cyclops.DataModules.clsDataModuleParameterHandler.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="Parameters">Dictionary of Visualization Parameters</param>
        </member>
        <member name="M:Cyclops.DataModules.clsDataModuleParameterHandler.SeparateListOfStrings(System.Collections.Generic.List{System.String},System.Char,System.Boolean)">
            <summary>
            Converts a list of strings to values separated by a given character
            </summary>
            <param name="Identifiers">List of strings</param>
            <param name="Separator">Character to separate the values</param>
            <param name="Quotes">Whether to wrap values in quotation marks</param>
            <returns>Separated values</returns>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Add">
            <summary>
            Value to add to matrix in Transform
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.AltInputTableName">
            <summary>
            If the initial table name is not present in the 
            workspace, this parameter allows for an alternative
            table to be used for the analysis
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.AutoScale">
            <summary>
            Used in the Transform function to prevent negative
            numbers, it tells the function to dynamically
            determine if and by how much scaling should occur.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Source">
            <summary>
            Describes where the data is coming from, e.g. SQLite, CSV, TXT, etc.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.FilePath">
            <summary>
            Generic string used to identify a file.
            Initialized for the ProteinProphet.zip because that's what it was 
            initially for, but can be reset for other uses.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Password">
            <summary>
            Stores password, typically used for extracting files from zip
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.WorkDirectory">
            <summary>
            Working Directory to get and save files.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.InputFileName">
            <summary>
            Name and location of the file to pull data from
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.InputTableName">
            <summary>
            If coming from a database, indicates the name of the 
            table to pull from
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.NewTableName">
            <summary>
            Name to save the imported data to
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.TableType">
            <summary>
            For special cases involving saving the new table under
            a specific structure, e.g. as AssayData within an
            ExpressionSet object in R
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Target">
            <summary>
            Determines where the data will be placed, e.g. R, C#, etc.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.ImportDatasetType">
            <summary>
            Specific for R, indicates how the data is stored.
            e.g. As an expressionSet, data.frame, matrix, etc.
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Theta">
            <summary>
            Theta parameter used in the Beta-Binomial Model Analysis
            for Spectral Counting
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.P_ValueTable">
            <summary>
            Name of the p-value table, used for combining result tables
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.FoldChangeTable">
            <summary>
            Name of the fold-change table, used for combining result tables
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.NormalizedTable">
            <summary>
            Name of the normalized table, used for combining result tables
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.X_Link">
            <summary>
            For merging tables, the name of the column in table X used for 
            linking to table Y
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Y_Link">
            <summary>
            For merging tables, the name of the column in table Y used for
            linking to table X
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.X_Table">
            <summary>
            Name of Table X
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Y_Table">
            <summary>
            Name of Table Y
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.CommaSeparatedWithQuotesIdentifiers" -->
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.CommaSeparatedWithoutQuotesIdentifiers" -->
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.TabSeparatedWithQuotesIdentifiers" -->
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.TabSeparatedWithoutQuotesIdentifiers" -->
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.SemicolonSeparatedWithQuotesIdentifiers" -->
        <!-- Badly formed XML comment ignored for member "P:Cyclops.DataModules.clsDataModuleParameterHandler.SemicolonSeparatedWithoutQuotesIdentifiers" -->
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.PvalueThreshold">
            <summary>
            Defaults to 0.0001 (used in RMD analysis)
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Scale">
            <summary>
            Value to scale the matrix in Transform
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.LogBase">
            <summary>
            Base to transform the matrix in Transform
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.RowNames">
            <summary>
            Indicates the column to use for rownames when
            importing a table
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.ProteinInformationTable">
            <summary>
            Used in RRollup method, points to the T_Row_Metadata table
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.HasProteinInformationTable">
            <summary>
            Used in RRollup, indicates whether a Protein information table has been designated
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.MinimumPresence">
            <summary>
            Used in RRollup method, minimum presence of peptide considered in rollup, default is 10
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Mode">
            <summary>
            Used in RRollup, method used to rollup up peptide abundances, default is median
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.ProteinInfo_ProteinColumn">
            <summary>
            Used in RRollup, index of protein id column in T_Row_Metadata table, default is 1
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.ProteinInfo_PeptideColumn">
            <summary>
            Used in RRollup, index of peptide id column in T_Row_Metadata table, default is 3
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.MinimumOverlap">
            <summary>
            Used in RRollup, minimum overlap of peptides, default is 3
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.OneHitWonders">
            <summary>
            Used in RRollup, TRUE or FALSE whether to include one-hit-wonders, default is TRUE
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.GpValue">
            <summary>
            Used in RRollup, gp-value threshold, default 0.05
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.GminPCount">
            <summary>
            Used in RRollup, default is 5
            </summary>
        </member>
        <member name="P:Cyclops.DataModules.clsDataModuleParameterHandler.Center">
            <summary>
            Used in RRollup, TRUE or FALSE whether to center the data around 0, default is FALSE
            </summary>
        </member>
        <member name="T:Cyclops.clsCyclopsParametersKey">
            <summary>
            Static class that keeps track of all the parameters that are passed to Cyclops by the ATM.
            I created this class because I don't know what the parameter names are going to be that will 
            be passed, and this class provides a static centralized place to keep all these conversions.
            
            The keys are what my code calls these parameters, and the values are the names used by ATM.
            Note: I need to update the values as soon as I find out what the real parameters are going to be.
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsParametersKey.GetParameterName(System.String)">
            <summary>
            Using a common name for a parameter, GetParameterName will convert that identifier to 
            the identifier that is passed to CyclopsModel by the ATM
            </summary>
            <param name="Key">My Parameter Identifier</param>
            <returns></returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.#ctor">
            <summary>
            Exports a Spectral Count HTML summary file of the pipeline and workflow
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.#ctor(System.String)">
            <summary>
            Exports a Spectral Count  HTML summary file of the pipeline and workflow
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Exports a Spectral Count  HTML summary file of the pipeline and workflow
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSCO_Summary_HTML.BuildHtmlFile">
            <summary>
            Construct the HTML file
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.#ctor">
            <summary>
            Module to roll peptides up to proteins using the RRollup algorithm
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.#ctor(System.String)">
            <summary>
            Module to roll peptides up to proteins using the RRollup algorithm
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to roll peptides up to proteins using the RRollup algorithm
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.PerformOperation">
            <summary>
            Run RRollup on the data
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsRRollup.RRollupThePeptides">
            <summary>
            Performs the RRollup
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsMerge">
            <summary>
            Merges two tables together in R, works like a SQL inner join
            Parameters required:
            newTableName            = Name of the new table to create
            firstTable              = Name of table that falls in x position
            secondTable             = Name of table that falls in y position
            firstTableLinkColumn    = Column of table x that links to table y
            secondTableLinkColumn   = Column of table y that links to table x
            allX                    = Boolean to include all data from table x (TRUE or FALSE)
            allY                    = Boolean to include all data from table y (TRUE or FALSE)
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMerge.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMerge.#ctor(System.String)">
            <summary>
            Constructor that requires the Name of the R instance
            </summary>
            <param name="InstanceOfR">Path to R DLL</param>
        </member>
        <member name="M:Cyclops.DataModules.clsMerge.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMerge.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.clsTestResult">
            <summary>
            Provides an externally accessible return type for testing and 
            evaluating modules of Cyclops
            </summary>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsCorrelationHeatmap">
            <summary>
            Produces correlation matrices, significant matrices, and correlation heatmap
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.#ctor">
            <summary>
            Module to construct a correlation heatmap
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.#ctor(System.String)">
            <summary>
            Module to construct a correlation heatmap
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to construct a correlation heatmap
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.CreatePlotFile">
            <summary>
            Constructs and Runs the R statement to save the heatmap plot
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsCorrelationHeatmap.GetHeatmapStatement">
            <summary>
            Constructs the R statement that produces the heatmap
            </summary>
            <returns>R Statement</returns>
        </member>
        <member name="M:Cyclops.MiscModules.clsMiscFunctions.Collapse(System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Collapse a list of strings into a single string with each element
            separated by the specified delimiter
            </summary>
            <param name="List2Collapse">List to collapse</param>
            <param name="Delimiter">Delimiter to separate elements</param>
            <returns>Collapsed string</returns>
        </member>
        <member name="M:Cyclops.MiscModules.clsMiscFunctions.Collapse(System.String[],System.Char)">
            <summary>
            Collapse an array of strings into a single string with each element
            separated by the specified delimiter
            </summary>
            <param name="Array2Collapse">String array to collapse</param>
            <param name="Delimiter">Delimiter to separate elements</param>
            <returns>Collapsed string</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.#ctor">
            <summary>
            Exports an HTML file that summarizes LBF Data Analysis
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.#ctor(System.String)">
            <summary>
            Exports an HTML file that summarizes LBF Data Analysis
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Exports an HTML file that summarizes LBF Data Analysis
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.SetLRandCTflags">
            <summary>
            Sets the boolean values that indicate if normalization algrithms have been run.
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsLBF_Summary_HTML.BuildHtmlFile">
            <summary>
            Construct the HTML file
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.#ctor">
            <summary>
            Module for normalizing spectral count results
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.#ctor(System.String)">
            <summary>
            Module for normalizing spectral count results
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module for normalizing spectral count results
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsNormalizingSpectralCounts.NormalizeTheData">
            <summary>
            Normalizes the datasets
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBarPlot.#ctor">
            <summary>
            Develops a barplot from a table
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBarPlot.#ctor(System.String)">
            <summary>
            Develops a barplot from a table
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBarPlot.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Develops a barplot from a table
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBarPlot.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBarPlot.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsAggregate">
            <summary>
            Aggregates Tables based on Columns, ColumnMetadata, Rows, or RowMetadata
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.#ctor">
            <summary>
            Modules Aggregates data by columns or rows.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.#ctor(System.String)">
            <summary>
            Modules Aggregates data by columns or rows.
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Modules Aggregates data by columns or rows.
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.AggregateData">
            <summary>
            Performs the Aggregation
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsAggregate.TestAggregation">
            <summary>
            Unit Test for Aggregating data
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsCleanUpRSourceFileObjects.#ctor">
            <summary>
            Cleans up the R Workspace, methods brought in by the R source scripts
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCleanUpRSourceFileObjects.#ctor(System.String)">
            <summary>
            Cleans up the R Workspace, methods brought in by the R source scripts
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCleanUpRSourceFileObjects.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Cleans up the R Workspace, methods brought in by the R source scripts
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCleanUpRSourceFileObjects.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCleanUpRSourceFileObjects.TestCleanRWorkspace">
            <summary>
            Unit Test for Cleaning R Source Files
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsTransformModule">
            <summary>
            Transforms datasets in R using log transformations and scaling operations
            Parameters include:
            - "newTableName"    - name of the new table to be generated.
            - "inputTableName"  - name of the table in R workspace
            - "logBase"         - Base to perform log transformation
            - "scale"           - value to multiply by
            - "add"             - value to add by
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsTransformModule.#ctor">
            <summary>
            Module to scale and transform datasets
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsTransformModule.#ctor(System.String)">
            <summary>
            Module to scale and transform datasets
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsTransformModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to scale and transform datasets
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsTransformModule.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsTransformModule.TestTransform">
            <summary>
            Unit Test for Transforming data
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.#ctor">
            <summary>
            HTMLSummaryTemplate
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.#ctor(System.String)">
            <summary>
            HTMLSummaryTemplate
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            HTMLSummaryTemplate
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.BuildHtmlFile">
            <summary>
            Construct the HTML file
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSummaryHTMLTemplate.WriteTable(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates the html code to display a table on the webpage
            </summary>
            <param name="Table">Table to display</param>
            <param name="alignment">How to align the table on the page, eg. left, center, right</param>
            <param name="border">Size of border</param>
            <param name="TabSpaces">Number of tab spaces before the table tag</param>
            <returns></returns>
        </member>
        <member name="T:Cyclops.ExportModules.clsHTMLSummary">
            <summary>
            Required Parameters:
            tableName:  name of the table to use
            workDir:    working directory, typically included automatically
            
            includeHeatmap: true or false, whether to include the heatmap in the html file
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.#ctor">
            <summary>
            Exports an HTML summary file of the pipeline and workflow
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.#ctor(System.String)">
            <summary>
            Exports an HTML summary file of the pipeline and workflow
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Exports an HTML summary file of the pipeline and workflow
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLSummary.BuildHtmlFile">
            <summary>
            Construct the HTML file
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsRoot">
            <summary>
            Empty Root module that can be used in instances 
            when a Data Module is need to start the pipeline
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRoot.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsHistogram">
            <summary>
            Constructs histogram plots and saves the image file
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHistogram.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHistogram.#ctor(System.String)">
            <summary>
            Basic constructor that passes in the R workspace
            </summary>
            <param name="InstanceOfR">Instance of R Workspace</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHistogram.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHistogram.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsMissedCleavageAssessor">
            <summary>
            Module for summarizing missed cleavage events in peptide identifications
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.#ctor">
            <summary>
            Module for summarizing missed cleavage events in peptide identifications
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.#ctor(System.String)">
            <summary>
            Module for summarizing missed cleavage events in peptide identifications
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module for summarizing missed cleavage events in peptide identifications
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.RunMissedCleavageAssessor">
            <summary>
            Performs the Missed Cleavage assessment
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
        </member>
        <member name="M:Cyclops.DataModules.clsMissedCleavageAssessor.DropAnyExistingTables">
            <summary>
            If the table already exists, this function drops the table so the table can be reentered into the database.
            </summary>
        </member>
        <member name="T:Cyclops.clsGenericRCalls">
            <summary>
            Static class for making generic calls to the R workspace.
            </summary>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.ls(System.String)">
            <summary>
            Returns all the objects in the R workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <returns>List of all the datasets in the R workspace</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetMinimumValue(System.String,System.String)">
            <summary>
            Returns the minimum value of an object in the R workspace,
            with the exception of NA values.
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Object to return minimum of</param>
            <returns></returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetMaximumValue(System.String,System.String)">
            <summary>
            Returns the maximum value of an object in the R workspace,
            with the exception of NA values.
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Object to return maximum of</param>
            <returns>Maximum Value</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetLengthOfVector(System.String,System.String)">
            <summary>
            Returns the length of a vector
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="Vector">Vector to return length of</param>
            <returns>Length of Vector</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetUniqueLengthOfColumn(System.String,System.String,System.String)">
            <summary>
            Get the number of unique entries for a column in a given table
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TableName">Name of the Table</param>
            <param name="ColumnName">Name of Column in Table</param>
            <returns>Number of unique entries in the column</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetUniqueColumnElementsWithinTable(System.String,System.String,System.String)">
            <summary>
            Retrieves the unique elements within a column in a table
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TableName">Name of the Table</param>
            <param name="ColumnName">Name of Column in Table</param>
            <returns>Unique elements within the column</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetColumnNames(System.String,System.String)">
            <summary>
            Returns the names of the columns for the given table
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TableName">Name of your object</param>
            <returns>List of the columns for the table</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.TableContainsColumn(System.String,System.String,System.String)">
            <summary>
            Performs a check to determine if a table contains a given column name
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TableName">Name of your object</param>
            <param name="ColumnName">Name of column wish to test</param>
            <returns>True: table contains a column with given name; False: table does not contain a column with given name</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.Exists(System.String,System.String)">
            <summary>
            Tests whether an object exists in the workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Name of object</param>
            <returns>TRUE if object exists</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.ContainsObject(System.String,System.String)">
            <summary>
            Determines if an object is present in the R Workspace or not
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Name of the object</param>
            <returns>true if the object is present in the R workspace</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetClassOfObject(System.String,System.String)">
            <summary>
            Gets the class of an object in the R workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Name of the object</param>
            <returns>class of the object</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetWorkingDirectory(System.String)">
            <summary>
            Return the current working directory
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <returns>Current working directory</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.IsObjectOfClass(System.String,System.String,System.String)">
            <summary>
            Determines if an object is of a specified class
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="ObjectName">Name of the object</param>
            <param name="Class">Specified class to test</param>
            <returns>true if the object is of that class</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.AssessBoolean(System.String,System.String)">
            <summary>
            Evaluates a logical statement in R, and returns the result as a boolean
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="RStatement">Statement to evaluate to return TRUE or FALSE</param>
            <returns>TRUE or FALSE</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.InstallPackage(System.String,System.String)">
            <summary>
            Installs a specified package into the R workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="Package">Name of the package</param>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.IsPackageInstalled(System.String,System.String)">
            <summary>
            Determines if R has a specified package already installed or not
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="Package">Name of your package</param>
            <returns>>TRUE or FALSE</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetDataTable(System.String,System.String)">
            <summary>
            Converts an data.frame from R into a DataTable in C#
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TheDataFrame">Name of data.frame</param>
            <returns>DataTable version of your data.frame</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetDataTableIncludingRownames(System.String,System.String,System.String)">
            <summary>
            Converts an data.frame from R into a DataTable in C#
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>        
            <param name="TheDataFrame">Name of data.frame</param>
            <param name="NameOfFirstColumn">Name of the Rowname column, defaults to "RowNames"</param>
            <returns>DataTable version of your data.frame</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetRowNames(System.String,System.String)">
            <summary>
            Gets the row names for a data.frame or matrix in the R workspace
            </summary>
            <param name="InstanceOfR">Instance of the R workspace</param>
            <param name="ObjectName">Name of the data.frame or matrix</param>
            <returns>List of the rownames</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.GetDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Converts an data.frame from R into a DataTable in C#
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="TheDataFrame">Name of data.frame</param>
            <param name="IgnoreLs">If you table of interest is hidden within a list or object, set this to true</param>
            <returns>DataTable version of your data.frame</returns>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.SetDataFrame(System.String,System.Data.DataTable,System.String)">
            <summary>
            Converts a DataTable to a DataFrame in a given R workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="Table">The DataTable you want to convert to a data.frame</param>
            <param name="DataFrameName">Name of the new data.frame</param>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.SaveEnvironment(System.String,System.String)">
            <summary>
            Quick way to save your work environment
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="WorkspaceFileName">Name of the file you'd like to save the environment as</param>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.SetDataFrameRowNames(System.String,System.String,System.Int32)">
            <summary>
            Sets the specified column to the row.names, and then deletes that column
            from the data.frame
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="DataFrameName">Name of the Data Frame</param>
            <param name="ColumnIndex">Index of the column (first column starts at 1)</param>
        </member>
        <member name="M:Cyclops.clsGenericRCalls.SetMatrix(System.String,System.Data.DataTable,System.String)">
            <summary>
            Converts a DataTable to a Matrix in a given R workspace
            </summary>
            <param name="InstanceOfR">Instance of your R workspace</param>
            <param name="Table">The DataTable you want to convert to a data.frame</param>
            <param name="MatrixName">Name of the new matrix</param>
        </member>
        <member name="T:Cyclops.DataModules.clsZRollup">
            <summary>
            Performs a Z-Rollup of peptides to proteins
            
            THIS MODULE IS STILL IN DEVELOPMENT!!! WORKING ON METHOD CALL.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.#ctor">
            <summary>
            Module to roll peptides up to proteins using the ZRollup algorithm
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.#ctor(System.String)">
            <summary>
            Module to roll peptides up to proteins using the ZRollup algorithm
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to roll peptides up to proteins using the ZRollup algorithm
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.PerformOperation">
            <summary>
            Run RRollup on the data
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsZRollup.ZRollupThePeptides">
            <summary>
            Performs the RRollup
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsQCPeptideOverlap">
            <summary>
            QC Peptide Overlap runs the ja_OverlapMatrix function in QualityControl.R to determine 
            overlap between fractions
            
            Parameters include:
            - "newTableName"    - name of the new table to be generated.
            - "inputTableName"  - name of the table in R workspace
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsQCPeptideOverlap.#ctor">
            <summary>
            Module to count the number of unique peptide sequences within fractions
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsQCPeptideOverlap.#ctor(System.String)">
            <summary>
            Module to count the number of unique peptide sequences within fractions
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsQCPeptideOverlap.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to count the number of unique peptide sequences within fractions
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsQCPeptideOverlap.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsMelt">
            <summary>
            Performs a melt call. Basically turns a crosstab tab into long form
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMelt.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMelt.#ctor(System.String)">
            <summary>
            Constructor that requires the Name of the R instance
            </summary>
            <param name="InstanceOfR">Path to R DLL</param>
        </member>
        <member name="M:Cyclops.DataModules.clsMelt.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsMelt.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsMelt.SeparateListOfStrings(System.Collections.Generic.List{System.String},System.Char,System.Boolean)">
            <summary>
            Converts a list of strings to values separated by a given character
            </summary>
            <param name="Identifiers">List of strings</param>
            <param name="Separator">Character to separate the values</param>
            <param name="Quotes">Whether to wrap values in quotation marks</param>
            <returns>Separated values</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsANOVA">
            <summary>
            Parameters:
            inputTableName: table to perform linear regression on
            newTableName: new table name
            mode: type of anova (includes 'msstats')
            rowMetadataTable: name of the row metadata table
            linkRow: column in row metadata table that links to the data table
            rowFactor: column in the row metadata that specifies the protein
            factorTable: name of column metadata table
            linkCol: column in column metadata table that links to column headers, default 'Alias'
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsANOVA.#ctor">
            <summary>
            Module to perform ANOVA
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsANOVA.#ctor(System.String)">
            <summary>
            Module to perform ANOVA
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsANOVA.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to perform ANOVA
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsANOVA.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsANOVA.ANOVA">
            <summary>
            Run the ANOVA analysis
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cyclops.DataModules.clsANOVA.LoadMSstatsLibrary" -->
        <member name="T:Cyclops.clsMageDataTableSource">
            <summary>
            Mage module that can fucntion as root module in pipeline
            and serve contents of a .Net DataTable to standard tabular output
            </summary>
        </member>
        <member name="M:Cyclops.clsMageDataTableSource.Run(System.Object)">
            <summary>
            Serve the contents of the DataTable to standard tabular output
            (override of Mage BaseModule stub function)
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Cyclops.clsMageDataTableSource.GetMageColumnDefs">
            <summary>
            Convert column definitions in DataTable object
            to their eqivalent Mage column definitions
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cyclops.clsMageDataTableSource.SourceTable">
            <summary>
            The .Net DataTable object that will be sourced to standard tabular output
            </summary>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsBoxPlot">
            <summary>
            Plots a boxplot using the BoxPlot function
            
            Parameters include:
            tableName:      Name of table in R workspace as source for plot
            plotFileName:   Name of the file to return in the Plots directory
            
            backgroundColor:    Color of plot background        Defaults to white
            width:              Width of the plot in pixels     Defaults to 1200
            height:             Height of the plot in pixels    Defaults to 1200
            fontSize:           Size of font text in plot       Defaults to 12
            resolution:         Resolution of plot              Defaults to 600
            TODO: ADD THE OTHER PARAMTERS
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBoxPlot.#ctor">
            <summary>
            Develops a boxplot from a table
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBoxPlot.#ctor(System.String)">
            <summary>
            Develops a boxplot from a table
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBoxPlot.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Develops a boxplot from a table
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBoxPlot.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsBoxPlot.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.ExportModules.clsHTMLFileHandler">
            <summary>
            Class specifically designed to deal with coding html
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetHtmlHeader">
            <summary>
            Generic HTML and HEAD elements to start an HTML page
            </summary>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetTitle(System.String)">
            <summary>
            HTML Title script
            </summary>
            <param name="Title">Text that you would like displayed as the title of the page</param>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetCSSLink(System.String)">
            <summary>
            Links page to CSS file, automatically sets rel to 'stylesheet'
            </summary>
            <param name="CssFileName">Name of CSS file, e.g. 'MyStyles.css'</param>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetCSSLink(System.String,System.String)">
            <summary>
            Links page to CSS file
            </summary>
            <param name="RelAttribute">Relationship between html page and the linked document, e.g. 'stylesheet'</param>
            <param name="CssFileName">Name of CSS file, e.g. 'MyStyles.css'</param>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetHtmlJavascriptStart">
            <summary>
            Generic SCRIPT element start of javascript
            </summary>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetHtmlScriptEnd">
            <summary>
            Ends the Script element
            </summary>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetCSS(Cyclops.ExportModules.clsHTMLFileHandler.CssStyle,System.Int32)">
            <summary>
            Generates the code for the CSS file
            </summary>
            <param name="style">Indicates the type of css code you want</param>
            <returns>CSS code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetEndHeadStartBody">
            <summary>
            Generic end of HEAD and BODY elements in HTML code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetDatasetTableHtml(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            HTML code for the datasets table
            </summary>
            <param name="DatabaseFileName">Full path to the Results.DB3 file</param>
            <param name="Title">Title above the data table</param>
            <param name="Alignment">Alignment of table in html page</param>
            <param name="Border">Table border</param>
            <param name="TabSpaces">Table tabspaces</param>
            <param name="CellPadding">Table cell padding</param>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetDatasetInfo(System.String)">
            <summary>
            Retrieve Dataset information from the t_factors table in the database
            </summary>
            <param name="DatabaseFileName">Full path to the Results.DB3 file</param>
            <returns></returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetPictureCode(System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generic code to add a picture to the webpage
            </summary>
            <param name="PictureFileName">Name of image file, e.g. MyHeatmap.png</param>
            <param name="AddPlotsDirectory">Whether or not to add the 'Plots/' directory before image file name</param>
            <param name="Width">Width of image, if null then set to 400</param>
            <param name="Height">Height of image, if null then set to 400</param>
            <returns>HTML code</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetEndBodyEndHtml">
            <summary>
            End BODY and HTML elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsHTMLFileHandler.GetTableHtml(System.Data.DataTable,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Generates the html code to display a table on the webpage
            </summary>
            <param name="Table">Table to display</param>
            <param name="alignment">How to align the table on the page, eg. left, center, right</param>
            <param name="border">Size of border</param>
            <param name="TabSpaces">Number of tab spaces before the table tag</param>
            <returns></returns>
        </member>
        <member name="T:Cyclops.DataModules.clsCentralTendency">
            <summary>
            "CentralTendency"
            Parameters include:
            - "newTableName"    - name of the new table to be generated.
            - "inputTableName"  - name of the table in R workspace
            - "meanCenter"      - either "TRUE" or "FALSE" - FALSE makes it median.
            - "center"          - either "TRUE" or "FALSE" - TRUE centers the data at zero.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCentralTendency.#ctor">
            <summary>
            Normalizes data by mean or median central tendency
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCentralTendency.#ctor(System.String)">
            <summary>
            Normalizes data by mean or median central tendency
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCentralTendency.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Normalizes data by mean or median central tendency
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCentralTendency.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.ExportModules.clsExportTableModule">
            <summary>
            Exports tables from R environment to SQLite database, CSV, TSV, MSAccess, or SQLServer
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.#ctor">
            <summary>
            Exports a data.frame or matrix from R to a designated target (TXT, CSV, etc.)
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.#ctor(System.String)">
            <summary>
            Exports a data.frame or matrix from R to a designated target (TXT, CSV, etc.)
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Exports a data.frame or matrix from R to a designated target (TXT, CSV, etc.)
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.PerformOperation">
            <summary>
            Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.ConnectToSQLiteDatabase">
            <summary>
            Creates a connection to a sqlite database
            </summary>
            <param name="RInstance">Instance of your R workspace</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsExportTableModule.DisconnectFromDatabase">
            <summary>
            Terminates the connection to the SQLite database, releasing control of the database.
            </summary>
            <param name="RInstance">Instance of the R Workspace</param>
        </member>
        <member name="T:Cyclops.DataModules.clsSQLiteSummaryTableGenerator">
            <summary>
            This class counts the number of distinct 'columnNames' in 'inputTableName' within a given SQLite database
            and adds that number to 'newTableName' with 'variable'.
            Input Parameters:
            inputTableName:     Name of the table in the database that you want to query
            newTableName:       Name of the table in the database that will be updated
            columnName:         Name of the column in the inputTableName that will be counted
            variable:           Name of the variable to add to the newTableName
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsSQLiteSummaryTableGenerator.#ctor">
            <summary>
            Generates a summary table in the SQLite database summarizing the analysis progression
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsSQLiteSummaryTableGenerator.#ctor(System.String)">
            <summary>
            Generates a summary table in the SQLite database summarizing the analysis progression
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsSQLiteSummaryTableGenerator.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Generates a summary table in the SQLite database summarizing the analysis progression
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsSQLiteSummaryTableGenerator.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsRMD">
            <summary>
            Runs the RMD_RUNS function in R that will log10 transform peptide peak intensity, that is,
            peptide abundance data and determine if any LC-MS analyses (ie, runs) in a N x P peptide data
            set are statistical outliers. The statistical analysis is based on summarizing each LC-MS run 
            as a vector of q=5 summary statistics which describe the peptide abundance distribution for 
            a specific run; a N x q matrix is then analyzed using robust PCA to compute a robust estimate 
            of the covariance matrix used in the calculation of a robust Mahalanobis distance.
            
            Publication:
            Improved quality control processing of peptide-centric LC-MS proteomics data.
            Matzke MM, Waters KM, Metz TO, Jacobs JM, Sims AC, Baric RS, Pounds JG, Webb-Robertson BJ.
            Bioinformatics. 2011 Oct 15;27(20):2866-72. Epub 2011 Aug 18.
            PMID: 21852304
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRMD.#ctor">
            <summary>
            Performs Bobbie-Jo's RMD analysis to identify statistical outlier datasets
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRMD.#ctor(System.String)">
            <summary>
            Performs Bobbie-Jo's RMD analysis to identify statistical outlier datasets
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRMD.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Performs Bobbie-Jo's RMD analysis to identify statistical outlier datasets
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsRMD.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsRMD.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.#ctor">
            <summary>
            Calculates the fold-change between factors
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.#ctor(System.String)">
            <summary>
            Calculates the fold-change between factors
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Calculates the fold-change between factors
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsFoldChange.TestFoldChange">
            <summary>
            Unit Test for Beta-binomial Model data
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.#ctor">
            <summary>
            Filters a table based on the values within another table
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.#ctor(System.String)">
            <summary>
            Filters a table based on the values within another table
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Filters a table based on the values within another table
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsFilterByAnotherTable.CheckTablesExist">
            <summary>
            Performs a check to make sure that the tables exist in the R workspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHeatmap.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHeatmap.#ctor(System.String)">
            <summary>
            Basic constructor that passes in the R workspace
            </summary>
            <param name="InstanceOfR"></param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHeatmap.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHeatmap.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.clsMyTestingModule">
            <summary>
            Simple module for testing functions
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.#ctor">
            <summary>
            Operation performs a general iTRAQ analysis
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.#ctor(System.String)">
            <summary>
            Operation performs a general iTRAQ analysis
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Operation performs a general iTRAQ analysis
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.PerformOperation">
            <summary>
            Runs operation
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.ConstructModules">
            <summary>
            Retrieves the table from the Operations database and assembles the Modules 
            into a pipeline.
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.AddDataModule(System.Data.DataRow[])">
            <summary>
            Adds a Data Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.AddExportModule(System.Data.DataRow[])">
            <summary>
            Adds an Export Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.AddVisualModules(System.Data.DataRow[])">
            <summary>
            Adds a Visual Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsiTRAQMainOperation.RunModules">
            <summary>
            Runs the assembled modules
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsCast">
            <summary>
            Performs a cast call in R, similar to a table pivot
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCast.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCast.#ctor(System.String)">
            <summary>
            Constructor that requires the Name of the R instance
            </summary>
            <param name="InstanceOfR">Path to R DLL</param>
        </member>
        <member name="M:Cyclops.DataModules.clsCast.PerformOperation">
            <summary>
             Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsCast.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.clsMiscFunctions">
            <summary>
            Static class to commonly used functions
            </summary>
        </member>
        <member name="M:Cyclops.clsMiscFunctions.Concatenate(System.Collections.Generic.List{System.String},System.String,System.Boolean)">
            <summary>
            Concatenates the items in the list.
            </summary>
            <param name="MyList">List of items to concatenate</param>
            <param name="Sep">Delimiter</param>
            <param name="MakeRCompliant">If this is a list for R (e.g. 'c(...)')</param>
            <returns></returns>
        </member>
        <member name="M:Cyclops.clsMiscFunctions.SaveDataTable(System.Data.DataTable,System.String)">
            <summary>
            Saves the DataTable as a tab-delimited text file
            </summary>
            <param name="TheDataTable">DataTable to Save</param>
            <param name="FileName">Where the DataTable will be saved to</param>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.#ctor">
            <summary>
            Module that runs IDPicker
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.#ctor(System.String)">
            <summary>
            Module that runs IDPicker
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module that runs IDPicker
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.PerformOperation">
            STEP (remember to error check between steps):
            1. Build the IDPicker Directory in the working directory
            2. Unzip the contents from the IDPicker.zip folder (on gigasax),
               to the IDPicker Directory
            3. Copy the Database fasta file from C:/DMS_OrgDB to the IDPicker directory
            4. Copy the .pepXML file over to IDPicker Directory
            5. Build the Assembly File
            6. Run IDPicker
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.CreateIDPickerDirectory">
            <summary>
            Checks if the IDPicker directory already exists in the working
            directory. If so, it deletes all files in the directory, otherwise
            it creates the directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.ExtractIDPickerSoftware">
            <summary>
            Extracts the contents from IDPickerSoftware.zip (the path to this file
            is supplied by dsp), into the ProteinProphet directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.ReadSoftwareVersion">
            <summary>
            Reads in SoftwareVersion.txt file from the files extracted from
            zip archive. Authenticates software name and version. Logs Version
            identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.CopyDatabaseOver">
            <summary>
            Copies the database fasta file used in the search over to ProteinProphet
            directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.CopyOverPepXMLFile">
            <summary>
            Copies over the pepXML file. 
            This function is still under development.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.RunProteinProphetThruCrunchOneFile">
            <summary>
            Runs the bat one file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsIDPicker.ExecuteCommandSync(System.Object)">
            <summary>
            Executes a shell command synchronously.
            </summary>
            <param name="command">string command</param>
            <returns>string, as output of the command.</returns>
        </member>
        <member name="T:Cyclops.VisualizationModules.clsHexbin">
            <summary>
            Constructs and save a hexbin plot
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHexbin.#ctor">
            <summary>
            Module plots a hexbin graph to the Plots directory
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHexbin.#ctor(System.String)">
            <summary>
            Module plots a hexbin graph to the Plots directory
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHexbin.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module plots a hexbin graph to the Plots directory
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHexbin.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.VisualizationModules.clsHexbin.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="T:Cyclops.clsCyclopsXMLReader">
            <summary>
            Reads a Cyclops XML Workflow and assemble the modules
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsXMLReader.#ctor">
            <summary>
            Reads the Cyclops XML workflow, and assembles the modules in the specified order and
            configuration
            </summary>
        </member>
        <member name="M:Cyclops.clsCyclopsXMLReader.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads the Cyclops XML workflow, and assembles the modules in the specified order and
            configuration
            </summary>
            <param name="ParametersForCyclops">Parameters to run a Cyclops Pipeline</param>
        </member>
        <member name="M:Cyclops.clsCyclopsXMLReader.#ctor(Cyclops.clsCyclopsModel,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads the Cyclops XML workflow, and assembles the modules in the specified order and
            configuration
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="ParametersForCyclops">Parameters to run a Cyclops Pipeline</param>
        </member>
        <member name="M:Cyclops.clsCyclopsXMLReader.ReadXML_Workflow(System.String,System.String)">
            <summary>
            Read the XML workflow and assemble the modules
            </summary>
            <param name="XML_FileName">Path to the XML Workflow file</param>
            <param name="InstanceOfR">Name of the instance of R workspace</param>
            <returns>the root node module</returns>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.#ctor">
            <summary>
            Operation performs a general Label-free analysis
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.#ctor(System.String)">
            <summary>
            Operation performs a general Label-free analysis
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Operation performs a general Label-free analysis
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.PerformOperation">
            <summary>
            Runs operation
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.SetType(Cyclops.Operations.clsLabelFreeMainOperation.LbfTypes)">
            <summary>
            Sets the type of general LBF analysis to perform, defaults to Log2
            </summary>
            <param name="TypeOfAnalysis"></param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.ConstructModules">
            <summary>
            Retrieves the table from the Operations database and assembles the Modules 
            into a pipeline.
            </summary>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.AddDataModule(System.Data.DataRow[])">
            <summary>
            Adds a Data Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.AddExportModule(System.Data.DataRow[])">
            <summary>
            Adds an Export Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.AddVisualModules(System.Data.DataRow[])">
            <summary>
            Adds a Visual Module to the pipeline.
            </summary>
            <param name="Rows"></param>
        </member>
        <member name="M:Cyclops.Operations.clsLabelFreeMainOperation.RunModules">
            <summary>
            Runs the assembled modules
            </summary>
        </member>
        <member name="T:Cyclops.Operations.clsLabelFreeMainOperation.LbfTypes">
            <summary>
            Log2: Simple Log2 transformation, RRollup
            Log2LR: Log2 transformation, Linear Regression, RRollup
            Log2CT: Log2 transformation, Central Tendency, RRollup
            </summary>
        </member>
        <member name="T:Cyclops.DataModules.clsQuasiTel">
            <summary>
            Performs QuasiTel statistical analysis on spectral count data
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.#ctor">
            <summary>
            Performs a QuasiTel Statistical Analysis on Spectral Count data.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.#ctor(System.String)">
            <summary>
            Performs a QuasiTel Statistical Analysis on Spectral Count data.
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Performs a QuasiTel Statistical Analysis on Spectral Count data.
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsQuasiTel.TestBetaBinomialModel">
            <summary>
            Unit Test for QuasiTel
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.ExportModules.clsSaveEnvironment">
            <summary>
            Saves the R workspace to an .RData file
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.#ctor">
            <summary>
            Module saves the R workspace to a designated file
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.#ctor(System.String)">
            <summary>
            Module saves the R workspace to a designated file
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module saves the R workspace to a designated file
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.PerformOperation">
            <summary>
             Runs module
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.SaveToDefaultDirectory">
            <summary>
            Passes the parameters to the REngine to save the R workspace
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.CheckPassedParameters">
            <summary>
            Determine is all the necessary parameters are being passed to the object
            </summary>
            <returns>Returns true import module can proceed</returns>
        </member>
        <member name="M:Cyclops.ExportModules.clsSaveEnvironment.TestSaveR_Workspace">
            <summary>
            Unit Test for Importing a CSV file
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.DataModules.clsBetaBinomialModelModule">
            <summary>
            Performs the Beta-Binomial Model analysis on spectral count datasets
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.#ctor">
            <summary>
            Performs a BetaBinomial Statistical Analysis on Spectral Count data.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.#ctor(System.String)">
            <summary>
            Performs a BetaBinomial Statistical Analysis on Spectral Count data.
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Performs a BetaBinomial Statistical Analysis on Spectral Count data.
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsBetaBinomialModelModule.TestBetaBinomialModel">
            <summary>
            Unit Test for Beta-binomial Model data
            </summary>
            <returns>Information regarding the result of the UnitTest</returns>
        </member>
        <member name="T:Cyclops.ExportModules.cslExportParameterHandler">
            <summary>
            This class holds the parameters used by all Export classes 
            </summary>
        </member>
        <member name="M:Cyclops.ExportModules.cslExportParameterHandler.#ctor">
            Basic constructor
        </member>
        <member name="M:Cyclops.ExportModules.cslExportParameterHandler.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="Parameters">Dictionary of Visualization Parameters</param>
        </member>
        <member name="P:Cyclops.ExportModules.cslExportParameterHandler.Source">
            <summary>
            Describes where the data is coming from, e.g. SQLite, CSV, TXT, etc.
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.#ctor">
            <summary>
            Module that run ProteinProphet
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.#ctor(System.String)">
            <summary>
            Module that run ProteinProphet
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module that run ProteinProphet
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.PerformOperation">
            <summary>
            Runs module and then child modules
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.CreateProteinProphetDirectory">
            <summary>
            Checks if the ProteinProphet directory already exists in the working
            directory. If so, it deletes all files in the directory, otherwise
            it creates the directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.ExtractProteinProphetSoftware">
            <summary>
            Extracts the contents from ProteinProphet.zip (the path to this file
            is supplied by dsp), into the ProteinProphet directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.CopyDatabaseOver">
            <summary>
            Copies the database fasta file used in the search over to ProteinProphet
            directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.CreateDatabaseDatFile">
            <summary>
            Creates the database.dat file in the ProteinProphetDirectory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.ConstructProteinProphetInputFile">
            <summary>
            Builds the tab-delimited html file from the table of peptides/proteins in
            the SQLite database, formats the table to ProteinProphet standards, and
            saves it to the working directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.BuildTheCrunchFile">
            <summary>
            Builds the crunch-one.bat file for running ProteinProphet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.RunProteinProphetThruCrunchOneFile">
            <summary>
            Runs the bat one file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cyclops.DataModules.clsProteinProphet.ExecuteCommandSync(System.Object)">
            <summary>
            Executes a shell command synchronously.
            </summary>
            <param name="command">string command</param>
            <returns>string, as output of the command.</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.#ctor">
            <summary>
            Module to summarize the data (min, max, missingness, etc.)
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.#ctor(System.String)">
            <summary>
            Module to summarize the data (min, max, missingness, etc.)
            </summary>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.#ctor(Cyclops.clsCyclopsModel,System.String)">
            <summary>
            Module to summarize the data (min, max, missingness, etc.)
            </summary>
            <param name="TheCyclopsModel">Instance of the CyclopsModel to report to</param>
            <param name="InstanceOfR">Instance of R workspace to call</param>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.PerformOperation">
            <summary>
            Run Data Summary
            </summary>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.CheckPassedParameters">
            <summary>
            Checks the dictionary to ensure all the necessary parameters are present
            </summary>
            <returns>True if all necessary parameters are present</returns>
        </member>
        <member name="M:Cyclops.DataModules.clsSummarizeData.SummarizeTheData">
            <summary>
            Performs the Data Summary
            </summary>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.GetDataTable(System.String,System.String)">
            <summary>
            Retrieves a table from SQLite Database, and returns it in the 
            form of a DataTable.
            
            http://msdn.microsoft.com/en-us/magazine/ff898405.aspx
            Found the solution to the SQLite problem right here.
            </summary>
            <param name="Command">SQL statement to grab table information</param>
            <param name="Connection">Connection to the SQLite Database</param>
            <returns></returns>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.CreateTable(System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a table within a SQLite database
            </summary>
            <param name="Connection">Path and Filename of the SQLite database</param>
            <param name="TableName">Name of the new table to create</param>
            <param name="AutoID">Create an autoincrementing primary key in the first column of the table</param>
            <param name="Columns">Keys are column names and values are the type of variable</param>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.RunNonQuery(System.String,System.String)">
            <summary>
            Runs a NonQuery against the specified database
            </summary>
            <param name="Command">Command to execute</param>
            <param name="Connection">Path and Filename of the SQLite database</param>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.CreateIndex(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an index on a column within a table
            </summary>
            <param name="Connection">Path and Filename of the SQLite database</param>
            <param name="Table">Table name</param>
            <param name="Column">Name of Column to index within the table</param>
            <param name="IndexName">Name of the index, if null/blank, one will be automatically generated</param>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.WriteDataTableToSQLiteTable(System.String,System.Data.DataTable,System.String)">
            <summary>
            DataTable to SQLite Table, if the SQLite table does not exist, it 
            automatically creates that table and updates it.
            </summary>
            <param name="PathToDatabase">Full path the the sqlite database</param>
            <param name="Table">Source DataTable</param>
            <param name="TableName">Name of table in SQLite database</param>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.WriteTabDelimitedTextFileToSQLiteTable(System.String,System.String,System.String)">
            <summary>
            Tab-delimited Text File to SQLite Table, if the SQLite table does not exist,
            it automatically creates that table and updates it.
            </summary>
            <param name="PathToDatabase">Full path the the sqlite database</param>
            <param name="PathToTextFile">Full path the the tab-delimited text file</param>
            <param name="TableName">Name of table in SQLite database</param>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.GetDatabaseInformation(System.String)">
            <summary>
            Gets the table information regarding the database from sqlite_master, such as table names etc.
            </summary>
            <param name="DatabasePath">Full path to the database.</param>
            <returns>Datatable of all the information</returns>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.TableExists(System.String,System.String)">
            <summary>
            Determines if a table is present in the database or not
            </summary>
            <param name="TableName">Name of table</param>
            <param name="DatabaseFilePath">Full path to the database</param>
            <returns>True if table is present, otherwise false</returns>
        </member>
        <member name="M:Cyclops.clsSQLiteHandler.DropTable(System.String,System.String)">
            <summary>
            If a table exists in the database, this will remove the table
            </summary>
            <param name="TableName">Name of table to delete</param>
            <param name="DatabaseFilePath">Full path to the database</param>
        </member>
    </members>
</doc>
