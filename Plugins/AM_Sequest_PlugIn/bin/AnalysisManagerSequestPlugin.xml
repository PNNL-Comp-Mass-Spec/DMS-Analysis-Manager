<?xml version="1.0"?>
<doc>
<assembly>
<name>
AnalysisManagerSequestPlugin
</name>
</assembly>
<members>
<member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.MakeOUTFiles">
	<summary>
 Modifies MakeOUTFiles to remove multiple processes used on non-clustered machines
 </summary>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.m_CmdRunner_LoopWaiting">
	<summary>
 Provides a wait loop while Sequest is running
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.AddClusterStatsToSummaryFile">
	<summary>
 Reads sequest.log file after Sequest finishes and adds cluster statistics info to summary file
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.GetIntegerFromSeqLogFileString(System.String,System.String)">
	<summary>
 Finds specified integer value in a sequest.log file
 </summary>
	<param name="InpFileStr">A string containing the contents of the sequest.log file</param>
	<param name="RegexStr">Regular expresion match string to uniquely identify the line containing the count of interest</param>
	<returns>Count from desired line in sequest.log file if successful; 0 if count not found; -1 for error</returns>
	<remarks>If -1 returned, error message is in module variable m_ErrMsg</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.GetSingleFromSeqLogFileString(System.String,System.String)">
	<summary>
 Finds specified integer value in a sequest.log file
 </summary>
	<param name="InpFileStr">A string containing the contents of the sequest.log file</param>
	<param name="RegexStr">Regular expresion match string to uniquely identify the line containing the count of interest</param>
	<returns>Count from desired line in sequest.log file if successful; 0 if count not found; -1 for error</returns>
	<remarks>If -1 returned, error message is in module variable m_ErrMsg</remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.HandleOutFileChange(System.String)">
	<summary>
 Adds newly created .Out file to mOutFileCandidates and mOutFileCandidateInfo
 </summary>
	<param name="OutFileName"></param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqCluster.ValidateProcessorsAreActive">
	<summary>
 Uses PVM command ps -a to determine the number of active nodes
 Sets mResetPVM to True if fewer than 50% of the nodes are creating .Out files
 </summary>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.RunTool">
	<summary>
 Runs the analysis tool
 </summary>
	<returns>IJobParams.CloseOutType value indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.CalculateNewStatus">
	<summary>
 Calculates status information for progress file by counting the number of .out files
 </summary>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.CalculateNewStatus(System.Boolean)">
	<summary>
 Calculates status information for progress file by counting the number of .out files
 </summary>
	<param name="blnUpdateDTACount">Set to True to update m_DtaCount</param>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.MakeOUTFiles">
	<summary>
 Runs Sequest to make .out files
 This function uses the standalone Sequest.exe program; it is not used by the Sequest clusters
 </summary>
	<returns>CloseOutType enum indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ConcatOutFiles(System.String,System.String,System.String)">
	<summary>
 Concatenates any .out files that still remain in the the working directory
 If running on the Sequest Cluster, then the majority of the files should have already been appended to _out.txt.tmp
 </summary>
	<param name="WorkDir">Working directory</param>
	<param name="DSName">Dataset name</param>
	<param name="JobNum">Job number</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.StoreToolVersionInfo(System.String)">
	<summary>
 Stores the Sequest tool version info in the database
 If strOutFilePath is defined, then looks up the specific Sequest version using the given .Out file
 Also records the file date of the Sequest Program .exe
 </summary>
	<param name="strOutFilePath"></param>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateDTAFiles">
	<summary>
 Make sure at least one .DTA file exists
 Also makes sure at least one of the .DTA files has data
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateSequestNodeCount(System.String)">
	<summary>
 Opens the sequest.log file in the working directory
 Parses out the number of nodes used and the number of slave processes spawned
 Counts the number of DTA files analyzed by each process
 </summary>
	<remarks></remarks>
	<returns>True if file found and information successfully parsed from it (regardless of the validity of the information); False if file not found or error parsing information</returns>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ValidateSequestNodeCount(System.String,System.Boolean)">
	<summary>
 Opens the sequest.log file in the working directory
 Parses out the number of nodes used and the number of slave processes spawned
 Counts the number of DTA files analyzed by each process
 </summary>
	<param name="strLogFilePath">Path to the sequest.log file to parse</param>
	<param name="blnLogToConsole">If true, then displays the various status messages at the console</param>
	<remarks></remarks>
	<returns>True if file found and information successfully parsed from it (regardless of the validity of the information); False if file not found or error parsing information</returns>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisToolRunnerSeqBase.ZipConcatOutFile(System.String,System.String)">
	<summary>
 Zips the concatenated .out file
 </summary>
	<param name="WorkDir">Working directory</param>
	<param name="JobNum">Job number</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.CheckForExistingConcatenatedOutFile">
	<summary>
 Look for file _out.txt.tmp in the transfer folder
 If present, also looks for the JobParameters.xml file and the sequest param file
 </summary>
	<returns>True if file is found and the folder also has a parameter file and settings file that corresponds to the ones in the local DMS_Work folder</returns>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.TextFilesMatch(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String[]@)">
	<summary>
 Compares two files line-by-line.  If intComparisonStartLine is &gt; 0, then ignores differences up until the given line number.  If 
 </summary>
	<param name="strFile1">First file</param>
	<param name="strFile2">Second file</param>
	<param name="intComparisonStartLine">Line at which to start the comparison; if 0 or 1, then compares all lines</param>
	<param name="intComparisonEndLine">Line at which to end the comparison; if 0, then compares all the way to the end</param>
	<param name="blnIgnoreWhitespace">If true, then removes white space from the beginning and end of each line before compaing</param>
	<param name="strLineIgnoreRegExList">List of RegEx match specs that indicate lines to ignore</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.GetResources">
	<summary>
 Retrieves files necessary for performance of Sequest analysis
 </summary>
	<returns>IJobParams.CloseOutType indicating success or failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.VerifyDatabase(System.String,System.String)">
	<summary>
 Verifies the fasta file required by the job is distributed to all the cluster nodes
 </summary>
	<param name="OrgDBName">Fasta file name</param>
	<param name="OrgDBPath">Fasta file location on analysis machine</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.GetHostList(System.String)">
	<summary>
 Reads the list of nodes from the hosts config file
 </summary>
	<param name="HostFilePath">Name of hosts file on cluster head node</param>
	<returns>returns a string collection containing IP addresses for each node</returns>
	<remarks></remarks>
</member><member name="M:AnalysisManagerSequestPlugin.clsAnalysisResourcesSeq.VerifyRemoteDatabase(System.String,System.String,System.Boolean@)">
	<summary>
 Verifies specified database is present on the node. If present, compares date and size. If not
	present, copies database from master
 </summary>
	<param name="OrgDBFilePath">Full path to the source file</param>
	<param name="DestPath">Fasta storage location on cluster node</param>
	<returns>TRUE for success; FALSE for failure</returns>
	<remarks>Assumes DestPath is URL containing IP address of node and destination share name</remarks>
</member>
</members>
</doc>